// Generated by JavaScript APG, Version [`apg-js2`](https://github.com/ldthomas/apg-js2)
var var generatedGrammar = function(){
"use strict";
  //```
  // SUMMARY
  //      rules = 115
  //       udts = 0
  //    opcodes = 775
  //        ---   ABNF original opcodes
  //        ALT = 58
  //        CAT = 122
  //        REP = 68
  //        RNM = 362
  //        TLS = 127
  //        TBS = 14
  //        TRG = 24
  //        ---   SABNF superset opcodes
  //        UDT = 0
  //        AND = 0
  //        NOT = 0
  //        BKA = 0
  //        BKN = 0
  //        BKR = 0
  //        ABG = 0
  //        AEN = 0
  // characters = [9 - 244]
  //```
  /* OBJECT IDENTIFIER (for internal parser use) */
  this.grammarObject = 'grammarObject';

  /* RULES */
  this.rules = [];
  this.rules[0] = {name: 'expressionTemplate', lower: 'expressiontemplate', index: 0, isBkr: false};
  this.rules[1] = {name: 'subExpression', lower: 'subexpression', index: 1, isBkr: false};
  this.rules[2] = {name: 'definitionStatus', lower: 'definitionstatus', index: 2, isBkr: false};
  this.rules[3] = {name: 'equivalentTo', lower: 'equivalentto', index: 3, isBkr: false};
  this.rules[4] = {name: 'subtypeOf', lower: 'subtypeof', index: 4, isBkr: false};
  this.rules[5] = {name: 'focusConcept', lower: 'focusconcept', index: 5, isBkr: false};
  this.rules[6] = {name: 'conceptReference', lower: 'conceptreference', index: 6, isBkr: false};
  this.rules[7] = {name: 'conceptId', lower: 'conceptid', index: 7, isBkr: false};
  this.rules[8] = {name: 'term', lower: 'term', index: 8, isBkr: false};
  this.rules[9] = {name: 'refinement', lower: 'refinement', index: 9, isBkr: false};
  this.rules[10] = {name: 'attributeGroup', lower: 'attributegroup', index: 10, isBkr: false};
  this.rules[11] = {name: 'attributeSet', lower: 'attributeset', index: 11, isBkr: false};
  this.rules[12] = {name: 'attribute', lower: 'attribute', index: 12, isBkr: false};
  this.rules[13] = {name: 'attributeName', lower: 'attributename', index: 13, isBkr: false};
  this.rules[14] = {name: 'attributeValue', lower: 'attributevalue', index: 14, isBkr: false};
  this.rules[15] = {name: 'expressionValue', lower: 'expressionvalue', index: 15, isBkr: false};
  this.rules[16] = {name: 'stringValue', lower: 'stringvalue', index: 16, isBkr: false};
  this.rules[17] = {name: 'numericValue', lower: 'numericvalue', index: 17, isBkr: false};
  this.rules[18] = {name: 'integerValue', lower: 'integervalue', index: 18, isBkr: false};
  this.rules[19] = {name: 'decimalValue', lower: 'decimalvalue', index: 19, isBkr: false};
  this.rules[20] = {name: 'sctId', lower: 'sctid', index: 20, isBkr: false};
  this.rules[21] = {name: 'ws', lower: 'ws', index: 21, isBkr: false};
  this.rules[22] = {name: 'SP', lower: 'sp', index: 22, isBkr: false};
  this.rules[23] = {name: 'HTAB', lower: 'htab', index: 23, isBkr: false};
  this.rules[24] = {name: 'CR', lower: 'cr', index: 24, isBkr: false};
  this.rules[25] = {name: 'LF', lower: 'lf', index: 25, isBkr: false};
  this.rules[26] = {name: 'QM', lower: 'qm', index: 26, isBkr: false};
  this.rules[27] = {name: 'BS', lower: 'bs', index: 27, isBkr: false};
  this.rules[28] = {name: 'digit', lower: 'digit', index: 28, isBkr: false};
  this.rules[29] = {name: 'zero', lower: 'zero', index: 29, isBkr: false};
  this.rules[30] = {name: 'digitNonZero', lower: 'digitnonzero', index: 30, isBkr: false};
  this.rules[31] = {name: 'nonwsNonPipe', lower: 'nonwsnonpipe', index: 31, isBkr: false};
  this.rules[32] = {name: 'anyNonEscapedChar', lower: 'anynonescapedchar', index: 32, isBkr: false};
  this.rules[33] = {name: 'escapedChar', lower: 'escapedchar', index: 33, isBkr: false};
  this.rules[34] = {name: 'UTF8-2', lower: 'utf8-2', index: 34, isBkr: false};
  this.rules[35] = {name: 'UTF8-3', lower: 'utf8-3', index: 35, isBkr: false};
  this.rules[36] = {name: 'UTF8-4', lower: 'utf8-4', index: 36, isBkr: false};
  this.rules[37] = {name: 'UTF8-tail', lower: 'utf8-tail', index: 37, isBkr: false};
  this.rules[38] = {name: 'templateSlot', lower: 'templateslot', index: 38, isBkr: false};
  this.rules[39] = {name: 'templateReplacementSlot', lower: 'templatereplacementslot', index: 39, isBkr: false};
  this.rules[40] = {name: 'conceptReplacementSlot', lower: 'conceptreplacementslot', index: 40, isBkr: false};
  this.rules[41] = {name: 'expressionReplacementSlot', lower: 'expressionreplacementslot', index: 41, isBkr: false};
  this.rules[42] = {name: 'tokenReplacementSlot', lower: 'tokenreplacementslot', index: 42, isBkr: false};
  this.rules[43] = {name: 'concreteValueReplacementSlot', lower: 'concretevaluereplacementslot', index: 43, isBkr: false};
  this.rules[44] = {name: 'stringReplacementSlot', lower: 'stringreplacementslot', index: 44, isBkr: false};
  this.rules[45] = {name: 'integerReplacementSlot', lower: 'integerreplacementslot', index: 45, isBkr: false};
  this.rules[46] = {name: 'decimalReplacementSlot', lower: 'decimalreplacementslot', index: 46, isBkr: false};
  this.rules[47] = {name: 'slotTokenSet', lower: 'slottokenset', index: 47, isBkr: false};
  this.rules[48] = {name: 'slotStringSet', lower: 'slotstringset', index: 48, isBkr: false};
  this.rules[49] = {name: 'slotIntegerSet', lower: 'slotintegerset', index: 49, isBkr: false};
  this.rules[50] = {name: 'slotDecimalSet', lower: 'slotdecimalset', index: 50, isBkr: false};
  this.rules[51] = {name: 'slotIntegerRange', lower: 'slotintegerrange', index: 51, isBkr: false};
  this.rules[52] = {name: 'slotIntegerMinimum', lower: 'slotintegerminimum', index: 52, isBkr: false};
  this.rules[53] = {name: 'slotIntegerMaximum', lower: 'slotintegermaximum', index: 53, isBkr: false};
  this.rules[54] = {name: 'slotDecimalRange', lower: 'slotdecimalrange', index: 54, isBkr: false};
  this.rules[55] = {name: 'slotDecimalMinimum', lower: 'slotdecimalminimum', index: 55, isBkr: false};
  this.rules[56] = {name: 'slotDecimalMaximum', lower: 'slotdecimalmaximum', index: 56, isBkr: false};
  this.rules[57] = {name: 'exclusiveMinimum', lower: 'exclusiveminimum', index: 57, isBkr: false};
  this.rules[58] = {name: 'exclusiveMaximum', lower: 'exclusivemaximum', index: 58, isBkr: false};
  this.rules[59] = {name: 'slotName', lower: 'slotname', index: 59, isBkr: false};
  this.rules[60] = {name: 'slotToken', lower: 'slottoken', index: 60, isBkr: false};
  this.rules[61] = {name: 'slotString', lower: 'slotstring', index: 61, isBkr: false};
  this.rules[62] = {name: 'nonQuoteStringValue', lower: 'nonquotestringvalue', index: 62, isBkr: false};
  this.rules[63] = {name: 'templateInformationSlot', lower: 'templateinformationslot', index: 63, isBkr: false};
  this.rules[64] = {name: 'slotInformation', lower: 'slotinformation', index: 64, isBkr: false};
  this.rules[65] = {name: 'expressionConstraint', lower: 'expressionconstraint', index: 65, isBkr: false};
  this.rules[66] = {name: 'refinedExpressionConstraint', lower: 'refinedexpressionconstraint', index: 66, isBkr: false};
  this.rules[67] = {name: 'compoundExpressionConstraint', lower: 'compoundexpressionconstraint', index: 67, isBkr: false};
  this.rules[68] = {name: 'conjunctionExpressionConstraint', lower: 'conjunctionexpressionconstraint', index: 68, isBkr: false};
  this.rules[69] = {name: 'disjunctionExpressionConstraint', lower: 'disjunctionexpressionconstraint', index: 69, isBkr: false};
  this.rules[70] = {name: 'exclusionExpressionConstraint', lower: 'exclusionexpressionconstraint', index: 70, isBkr: false};
  this.rules[71] = {name: 'dottedExpressionConstraint', lower: 'dottedexpressionconstraint', index: 71, isBkr: false};
  this.rules[72] = {name: 'dottedExpressionAttribute', lower: 'dottedexpressionattribute', index: 72, isBkr: false};
  this.rules[73] = {name: 'subExpressionConstraint', lower: 'subexpressionconstraint', index: 73, isBkr: false};
  this.rules[74] = {name: 'eclFocusConcept', lower: 'eclfocusconcept', index: 74, isBkr: false};
  this.rules[75] = {name: 'dot', lower: 'dot', index: 75, isBkr: false};
  this.rules[76] = {name: 'memberOf', lower: 'memberof', index: 76, isBkr: false};
  this.rules[77] = {name: 'eclConceptReference', lower: 'eclconceptreference', index: 77, isBkr: false};
  this.rules[78] = {name: 'wildCard', lower: 'wildcard', index: 78, isBkr: false};
  this.rules[79] = {name: 'constraintOperator', lower: 'constraintoperator', index: 79, isBkr: false};
  this.rules[80] = {name: 'descendantOf', lower: 'descendantof', index: 80, isBkr: false};
  this.rules[81] = {name: 'descendantOrSelfOf', lower: 'descendantorselfof', index: 81, isBkr: false};
  this.rules[82] = {name: 'childOf', lower: 'childof', index: 82, isBkr: false};
  this.rules[83] = {name: 'ancestorOf', lower: 'ancestorof', index: 83, isBkr: false};
  this.rules[84] = {name: 'ancestorOrSelfOf', lower: 'ancestororselfof', index: 84, isBkr: false};
  this.rules[85] = {name: 'parentOf', lower: 'parentof', index: 85, isBkr: false};
  this.rules[86] = {name: 'conjunction', lower: 'conjunction', index: 86, isBkr: false};
  this.rules[87] = {name: 'disjunction', lower: 'disjunction', index: 87, isBkr: false};
  this.rules[88] = {name: 'exclusion', lower: 'exclusion', index: 88, isBkr: false};
  this.rules[89] = {name: 'eclRefinement', lower: 'eclrefinement', index: 89, isBkr: false};
  this.rules[90] = {name: 'conjunctionRefinementSet', lower: 'conjunctionrefinementset', index: 90, isBkr: false};
  this.rules[91] = {name: 'disjunctionRefinementSet', lower: 'disjunctionrefinementset', index: 91, isBkr: false};
  this.rules[92] = {name: 'subRefinement', lower: 'subrefinement', index: 92, isBkr: false};
  this.rules[93] = {name: 'eclAttributeSet', lower: 'eclattributeset', index: 93, isBkr: false};
  this.rules[94] = {name: 'conjunctionAttributeSet', lower: 'conjunctionattributeset', index: 94, isBkr: false};
  this.rules[95] = {name: 'disjunctionAttributeSet', lower: 'disjunctionattributeset', index: 95, isBkr: false};
  this.rules[96] = {name: 'subAttributeSet', lower: 'subattributeset', index: 96, isBkr: false};
  this.rules[97] = {name: 'eclAttributeGroup', lower: 'eclattributegroup', index: 97, isBkr: false};
  this.rules[98] = {name: 'eclAttribute', lower: 'eclattribute', index: 98, isBkr: false};
  this.rules[99] = {name: 'cardinality', lower: 'cardinality', index: 99, isBkr: false};
  this.rules[100] = {name: 'minValue', lower: 'minvalue', index: 100, isBkr: false};
  this.rules[101] = {name: 'to', lower: 'to', index: 101, isBkr: false};
  this.rules[102] = {name: 'maxValue', lower: 'maxvalue', index: 102, isBkr: false};
  this.rules[103] = {name: 'many', lower: 'many', index: 103, isBkr: false};
  this.rules[104] = {name: 'reverseFlag', lower: 'reverseflag', index: 104, isBkr: false};
  this.rules[105] = {name: 'eclAttributeName', lower: 'eclattributename', index: 105, isBkr: false};
  this.rules[106] = {name: 'expressionComparisonOperator', lower: 'expressioncomparisonoperator', index: 106, isBkr: false};
  this.rules[107] = {name: 'numericComparisonOperator', lower: 'numericcomparisonoperator', index: 107, isBkr: false};
  this.rules[108] = {name: 'stringComparisonOperator', lower: 'stringcomparisonoperator', index: 108, isBkr: false};
  this.rules[109] = {name: 'nonNegativeIntegerValue', lower: 'nonnegativeintegervalue', index: 109, isBkr: false};
  this.rules[110] = {name: 'mws', lower: 'mws', index: 110, isBkr: false};
  this.rules[111] = {name: 'comment', lower: 'comment', index: 111, isBkr: false};
  this.rules[112] = {name: 'nonStarChar', lower: 'nonstarchar', index: 112, isBkr: false};
  this.rules[113] = {name: 'starWithNonFSlash', lower: 'starwithnonfslash', index: 113, isBkr: false};
  this.rules[114] = {name: 'nonFSlash', lower: 'nonfslash', index: 114, isBkr: false};

  /* UDTS */
  this.udts = [];

  /* OPCODES */
  /* expressionTemplate */
  this.rules[0].opcodes = [];
  this.rules[0].opcodes[0] = {type: 2, children: [1,2,8,9]};// CAT
  this.rules[0].opcodes[1] = {type: 4, index: 21};// RNM(ws)
  this.rules[0].opcodes[2] = {type: 3, min: 0, max: 1};// REP
  this.rules[0].opcodes[3] = {type: 2, children: [4,7]};// CAT
  this.rules[0].opcodes[4] = {type: 1, children: [5,6]};// ALT
  this.rules[0].opcodes[5] = {type: 4, index: 2};// RNM(definitionStatus)
  this.rules[0].opcodes[6] = {type: 4, index: 42};// RNM(tokenReplacementSlot)
  this.rules[0].opcodes[7] = {type: 4, index: 21};// RNM(ws)
  this.rules[0].opcodes[8] = {type: 4, index: 1};// RNM(subExpression)
  this.rules[0].opcodes[9] = {type: 4, index: 21};// RNM(ws)

  /* subExpression */
  this.rules[1].opcodes = [];
  this.rules[1].opcodes[0] = {type: 2, children: [1,2]};// CAT
  this.rules[1].opcodes[1] = {type: 4, index: 5};// RNM(focusConcept)
  this.rules[1].opcodes[2] = {type: 3, min: 0, max: 1};// REP
  this.rules[1].opcodes[3] = {type: 2, children: [4,5,6,7]};// CAT
  this.rules[1].opcodes[4] = {type: 4, index: 21};// RNM(ws)
  this.rules[1].opcodes[5] = {type: 7, string: [58]};// TLS
  this.rules[1].opcodes[6] = {type: 4, index: 21};// RNM(ws)
  this.rules[1].opcodes[7] = {type: 4, index: 9};// RNM(refinement)

  /* definitionStatus */
  this.rules[2].opcodes = [];
  this.rules[2].opcodes[0] = {type: 1, children: [1,2]};// ALT
  this.rules[2].opcodes[1] = {type: 4, index: 3};// RNM(equivalentTo)
  this.rules[2].opcodes[2] = {type: 4, index: 4};// RNM(subtypeOf)

  /* equivalentTo */
  this.rules[3].opcodes = [];
  this.rules[3].opcodes[0] = {type: 7, string: [61,61,61]};// TLS

  /* subtypeOf */
  this.rules[4].opcodes = [];
  this.rules[4].opcodes[0] = {type: 7, string: [60,60,60]};// TLS

  /* focusConcept */
  this.rules[5].opcodes = [];
  this.rules[5].opcodes[0] = {type: 2, children: [1,5,6]};// CAT
  this.rules[5].opcodes[1] = {type: 3, min: 0, max: 1};// REP
  this.rules[5].opcodes[2] = {type: 2, children: [3,4]};// CAT
  this.rules[5].opcodes[3] = {type: 4, index: 63};// RNM(templateInformationSlot)
  this.rules[5].opcodes[4] = {type: 4, index: 21};// RNM(ws)
  this.rules[5].opcodes[5] = {type: 4, index: 6};// RNM(conceptReference)
  this.rules[5].opcodes[6] = {type: 3, min: 0, max: Infinity};// REP
  this.rules[5].opcodes[7] = {type: 2, children: [8,9,10,11,15]};// CAT
  this.rules[5].opcodes[8] = {type: 4, index: 21};// RNM(ws)
  this.rules[5].opcodes[9] = {type: 7, string: [43]};// TLS
  this.rules[5].opcodes[10] = {type: 4, index: 21};// RNM(ws)
  this.rules[5].opcodes[11] = {type: 3, min: 0, max: 1};// REP
  this.rules[5].opcodes[12] = {type: 2, children: [13,14]};// CAT
  this.rules[5].opcodes[13] = {type: 4, index: 63};// RNM(templateInformationSlot)
  this.rules[5].opcodes[14] = {type: 4, index: 21};// RNM(ws)
  this.rules[5].opcodes[15] = {type: 4, index: 6};// RNM(conceptReference)

  /* conceptReference */
  this.rules[6].opcodes = [];
  this.rules[6].opcodes[0] = {type: 1, children: [1,2,3]};// ALT
  this.rules[6].opcodes[1] = {type: 4, index: 40};// RNM(conceptReplacementSlot)
  this.rules[6].opcodes[2] = {type: 4, index: 41};// RNM(expressionReplacementSlot)
  this.rules[6].opcodes[3] = {type: 2, children: [4,5]};// CAT
  this.rules[6].opcodes[4] = {type: 4, index: 7};// RNM(conceptId)
  this.rules[6].opcodes[5] = {type: 3, min: 0, max: 1};// REP
  this.rules[6].opcodes[6] = {type: 2, children: [7,8,9,10,11,12]};// CAT
  this.rules[6].opcodes[7] = {type: 4, index: 21};// RNM(ws)
  this.rules[6].opcodes[8] = {type: 7, string: [124]};// TLS
  this.rules[6].opcodes[9] = {type: 4, index: 21};// RNM(ws)
  this.rules[6].opcodes[10] = {type: 4, index: 8};// RNM(term)
  this.rules[6].opcodes[11] = {type: 4, index: 21};// RNM(ws)
  this.rules[6].opcodes[12] = {type: 7, string: [124]};// TLS

  /* conceptId */
  this.rules[7].opcodes = [];
  this.rules[7].opcodes[0] = {type: 4, index: 20};// RNM(sctId)

  /* term */
  this.rules[8].opcodes = [];
  this.rules[8].opcodes[0] = {type: 2, children: [1,2]};// CAT
  this.rules[8].opcodes[1] = {type: 4, index: 31};// RNM(nonwsNonPipe)
  this.rules[8].opcodes[2] = {type: 3, min: 0, max: Infinity};// REP
  this.rules[8].opcodes[3] = {type: 2, children: [4,6]};// CAT
  this.rules[8].opcodes[4] = {type: 3, min: 0, max: Infinity};// REP
  this.rules[8].opcodes[5] = {type: 4, index: 22};// RNM(SP)
  this.rules[8].opcodes[6] = {type: 4, index: 31};// RNM(nonwsNonPipe)

  /* refinement */
  this.rules[9].opcodes = [];
  this.rules[9].opcodes[0] = {type: 2, children: [1,4]};// CAT
  this.rules[9].opcodes[1] = {type: 1, children: [2,3]};// ALT
  this.rules[9].opcodes[2] = {type: 4, index: 11};// RNM(attributeSet)
  this.rules[9].opcodes[3] = {type: 4, index: 10};// RNM(attributeGroup)
  this.rules[9].opcodes[4] = {type: 3, min: 0, max: Infinity};// REP
  this.rules[9].opcodes[5] = {type: 2, children: [6,7,11]};// CAT
  this.rules[9].opcodes[6] = {type: 4, index: 21};// RNM(ws)
  this.rules[9].opcodes[7] = {type: 3, min: 0, max: 1};// REP
  this.rules[9].opcodes[8] = {type: 2, children: [9,10]};// CAT
  this.rules[9].opcodes[9] = {type: 7, string: [44]};// TLS
  this.rules[9].opcodes[10] = {type: 4, index: 21};// RNM(ws)
  this.rules[9].opcodes[11] = {type: 4, index: 10};// RNM(attributeGroup)

  /* attributeGroup */
  this.rules[10].opcodes = [];
  this.rules[10].opcodes[0] = {type: 2, children: [1,5,6,7,8,9]};// CAT
  this.rules[10].opcodes[1] = {type: 3, min: 0, max: 1};// REP
  this.rules[10].opcodes[2] = {type: 2, children: [3,4]};// CAT
  this.rules[10].opcodes[3] = {type: 4, index: 63};// RNM(templateInformationSlot)
  this.rules[10].opcodes[4] = {type: 4, index: 21};// RNM(ws)
  this.rules[10].opcodes[5] = {type: 7, string: [123]};// TLS
  this.rules[10].opcodes[6] = {type: 4, index: 21};// RNM(ws)
  this.rules[10].opcodes[7] = {type: 4, index: 11};// RNM(attributeSet)
  this.rules[10].opcodes[8] = {type: 4, index: 21};// RNM(ws)
  this.rules[10].opcodes[9] = {type: 7, string: [125]};// TLS

  /* attributeSet */
  this.rules[11].opcodes = [];
  this.rules[11].opcodes[0] = {type: 2, children: [1,2]};// CAT
  this.rules[11].opcodes[1] = {type: 4, index: 12};// RNM(attribute)
  this.rules[11].opcodes[2] = {type: 3, min: 0, max: Infinity};// REP
  this.rules[11].opcodes[3] = {type: 2, children: [4,5,6,7]};// CAT
  this.rules[11].opcodes[4] = {type: 4, index: 21};// RNM(ws)
  this.rules[11].opcodes[5] = {type: 7, string: [44]};// TLS
  this.rules[11].opcodes[6] = {type: 4, index: 21};// RNM(ws)
  this.rules[11].opcodes[7] = {type: 4, index: 12};// RNM(attribute)

  /* attribute */
  this.rules[12].opcodes = [];
  this.rules[12].opcodes[0] = {type: 2, children: [1,5,6,7,8,9]};// CAT
  this.rules[12].opcodes[1] = {type: 3, min: 0, max: 1};// REP
  this.rules[12].opcodes[2] = {type: 2, children: [3,4]};// CAT
  this.rules[12].opcodes[3] = {type: 4, index: 63};// RNM(templateInformationSlot)
  this.rules[12].opcodes[4] = {type: 4, index: 21};// RNM(ws)
  this.rules[12].opcodes[5] = {type: 4, index: 13};// RNM(attributeName)
  this.rules[12].opcodes[6] = {type: 4, index: 21};// RNM(ws)
  this.rules[12].opcodes[7] = {type: 7, string: [61]};// TLS
  this.rules[12].opcodes[8] = {type: 4, index: 21};// RNM(ws)
  this.rules[12].opcodes[9] = {type: 4, index: 14};// RNM(attributeValue)

  /* attributeName */
  this.rules[13].opcodes = [];
  this.rules[13].opcodes[0] = {type: 4, index: 6};// RNM(conceptReference)

  /* attributeValue */
  this.rules[14].opcodes = [];
  this.rules[14].opcodes[0] = {type: 1, children: [1,2,6,9]};// ALT
  this.rules[14].opcodes[1] = {type: 4, index: 15};// RNM(expressionValue)
  this.rules[14].opcodes[2] = {type: 2, children: [3,4,5]};// CAT
  this.rules[14].opcodes[3] = {type: 4, index: 26};// RNM(QM)
  this.rules[14].opcodes[4] = {type: 4, index: 16};// RNM(stringValue)
  this.rules[14].opcodes[5] = {type: 4, index: 26};// RNM(QM)
  this.rules[14].opcodes[6] = {type: 2, children: [7,8]};// CAT
  this.rules[14].opcodes[7] = {type: 7, string: [35]};// TLS
  this.rules[14].opcodes[8] = {type: 4, index: 17};// RNM(numericValue)
  this.rules[14].opcodes[9] = {type: 4, index: 43};// RNM(concreteValueReplacementSlot)

  /* expressionValue */
  this.rules[15].opcodes = [];
  this.rules[15].opcodes[0] = {type: 1, children: [1,2]};// ALT
  this.rules[15].opcodes[1] = {type: 4, index: 6};// RNM(conceptReference)
  this.rules[15].opcodes[2] = {type: 2, children: [3,4,5,6,7]};// CAT
  this.rules[15].opcodes[3] = {type: 7, string: [40]};// TLS
  this.rules[15].opcodes[4] = {type: 4, index: 21};// RNM(ws)
  this.rules[15].opcodes[5] = {type: 4, index: 1};// RNM(subExpression)
  this.rules[15].opcodes[6] = {type: 4, index: 21};// RNM(ws)
  this.rules[15].opcodes[7] = {type: 7, string: [41]};// TLS

  /* stringValue */
  this.rules[16].opcodes = [];
  this.rules[16].opcodes[0] = {type: 3, min: 1, max: Infinity};// REP
  this.rules[16].opcodes[1] = {type: 1, children: [2,3]};// ALT
  this.rules[16].opcodes[2] = {type: 4, index: 32};// RNM(anyNonEscapedChar)
  this.rules[16].opcodes[3] = {type: 4, index: 33};// RNM(escapedChar)

  /* numericValue */
  this.rules[17].opcodes = [];
  this.rules[17].opcodes[0] = {type: 2, children: [1,5]};// CAT
  this.rules[17].opcodes[1] = {type: 3, min: 0, max: 1};// REP
  this.rules[17].opcodes[2] = {type: 1, children: [3,4]};// ALT
  this.rules[17].opcodes[3] = {type: 7, string: [45]};// TLS
  this.rules[17].opcodes[4] = {type: 7, string: [43]};// TLS
  this.rules[17].opcodes[5] = {type: 1, children: [6,7]};// ALT
  this.rules[17].opcodes[6] = {type: 4, index: 19};// RNM(decimalValue)
  this.rules[17].opcodes[7] = {type: 4, index: 18};// RNM(integerValue)

  /* integerValue */
  this.rules[18].opcodes = [];
  this.rules[18].opcodes[0] = {type: 1, children: [1,5]};// ALT
  this.rules[18].opcodes[1] = {type: 2, children: [2,3]};// CAT
  this.rules[18].opcodes[2] = {type: 4, index: 30};// RNM(digitNonZero)
  this.rules[18].opcodes[3] = {type: 3, min: 0, max: Infinity};// REP
  this.rules[18].opcodes[4] = {type: 4, index: 28};// RNM(digit)
  this.rules[18].opcodes[5] = {type: 4, index: 29};// RNM(zero)

  /* decimalValue */
  this.rules[19].opcodes = [];
  this.rules[19].opcodes[0] = {type: 2, children: [1,2,3]};// CAT
  this.rules[19].opcodes[1] = {type: 4, index: 18};// RNM(integerValue)
  this.rules[19].opcodes[2] = {type: 7, string: [46]};// TLS
  this.rules[19].opcodes[3] = {type: 3, min: 1, max: Infinity};// REP
  this.rules[19].opcodes[4] = {type: 4, index: 28};// RNM(digit)

  /* sctId */
  this.rules[20].opcodes = [];
  this.rules[20].opcodes[0] = {type: 2, children: [1,2]};// CAT
  this.rules[20].opcodes[1] = {type: 4, index: 30};// RNM(digitNonZero)
  this.rules[20].opcodes[2] = {type: 3, min: 5, max: 17};// REP
  this.rules[20].opcodes[3] = {type: 4, index: 28};// RNM(digit)

  /* ws */
  this.rules[21].opcodes = [];
  this.rules[21].opcodes[0] = {type: 3, min: 0, max: Infinity};// REP
  this.rules[21].opcodes[1] = {type: 1, children: [2,3,4,5]};// ALT
  this.rules[21].opcodes[2] = {type: 4, index: 22};// RNM(SP)
  this.rules[21].opcodes[3] = {type: 4, index: 23};// RNM(HTAB)
  this.rules[21].opcodes[4] = {type: 4, index: 24};// RNM(CR)
  this.rules[21].opcodes[5] = {type: 4, index: 25};// RNM(LF)

  /* SP */
  this.rules[22].opcodes = [];
  this.rules[22].opcodes[0] = {type: 6, string: [32]};// TBS

  /* HTAB */
  this.rules[23].opcodes = [];
  this.rules[23].opcodes[0] = {type: 6, string: [9]};// TBS

  /* CR */
  this.rules[24].opcodes = [];
  this.rules[24].opcodes[0] = {type: 6, string: [13]};// TBS

  /* LF */
  this.rules[25].opcodes = [];
  this.rules[25].opcodes[0] = {type: 6, string: [10]};// TBS

  /* QM */
  this.rules[26].opcodes = [];
  this.rules[26].opcodes[0] = {type: 6, string: [34]};// TBS

  /* BS */
  this.rules[27].opcodes = [];
  this.rules[27].opcodes[0] = {type: 6, string: [92]};// TBS

  /* digit */
  this.rules[28].opcodes = [];
  this.rules[28].opcodes[0] = {type: 5, min: 48, max: 57};// TRG

  /* zero */
  this.rules[29].opcodes = [];
  this.rules[29].opcodes[0] = {type: 6, string: [48]};// TBS

  /* digitNonZero */
  this.rules[30].opcodes = [];
  this.rules[30].opcodes[0] = {type: 5, min: 49, max: 57};// TRG

  /* nonwsNonPipe */
  this.rules[31].opcodes = [];
  this.rules[31].opcodes[0] = {type: 1, children: [1,2,3,4,5]};// ALT
  this.rules[31].opcodes[1] = {type: 5, min: 33, max: 123};// TRG
  this.rules[31].opcodes[2] = {type: 5, min: 125, max: 126};// TRG
  this.rules[31].opcodes[3] = {type: 4, index: 34};// RNM(UTF8-2)
  this.rules[31].opcodes[4] = {type: 4, index: 35};// RNM(UTF8-3)
  this.rules[31].opcodes[5] = {type: 4, index: 36};// RNM(UTF8-4)

  /* anyNonEscapedChar */
  this.rules[32].opcodes = [];
  this.rules[32].opcodes[0] = {type: 1, children: [1,2,3,4,5,6,7,8,9]};// ALT
  this.rules[32].opcodes[1] = {type: 4, index: 23};// RNM(HTAB)
  this.rules[32].opcodes[2] = {type: 4, index: 24};// RNM(CR)
  this.rules[32].opcodes[3] = {type: 4, index: 25};// RNM(LF)
  this.rules[32].opcodes[4] = {type: 5, min: 32, max: 33};// TRG
  this.rules[32].opcodes[5] = {type: 5, min: 35, max: 91};// TRG
  this.rules[32].opcodes[6] = {type: 5, min: 93, max: 126};// TRG
  this.rules[32].opcodes[7] = {type: 4, index: 34};// RNM(UTF8-2)
  this.rules[32].opcodes[8] = {type: 4, index: 35};// RNM(UTF8-3)
  this.rules[32].opcodes[9] = {type: 4, index: 36};// RNM(UTF8-4)

  /* escapedChar */
  this.rules[33].opcodes = [];
  this.rules[33].opcodes[0] = {type: 1, children: [1,4]};// ALT
  this.rules[33].opcodes[1] = {type: 2, children: [2,3]};// CAT
  this.rules[33].opcodes[2] = {type: 4, index: 27};// RNM(BS)
  this.rules[33].opcodes[3] = {type: 4, index: 26};// RNM(QM)
  this.rules[33].opcodes[4] = {type: 2, children: [5,6]};// CAT
  this.rules[33].opcodes[5] = {type: 4, index: 27};// RNM(BS)
  this.rules[33].opcodes[6] = {type: 4, index: 27};// RNM(BS)

  /* UTF8-2 */
  this.rules[34].opcodes = [];
  this.rules[34].opcodes[0] = {type: 2, children: [1,2]};// CAT
  this.rules[34].opcodes[1] = {type: 5, min: 194, max: 223};// TRG
  this.rules[34].opcodes[2] = {type: 4, index: 37};// RNM(UTF8-tail)

  /* UTF8-3 */
  this.rules[35].opcodes = [];
  this.rules[35].opcodes[0] = {type: 1, children: [1,5,9,13]};// ALT
  this.rules[35].opcodes[1] = {type: 2, children: [2,3,4]};// CAT
  this.rules[35].opcodes[2] = {type: 6, string: [224]};// TBS
  this.rules[35].opcodes[3] = {type: 5, min: 160, max: 191};// TRG
  this.rules[35].opcodes[4] = {type: 4, index: 37};// RNM(UTF8-tail)
  this.rules[35].opcodes[5] = {type: 2, children: [6,7]};// CAT
  this.rules[35].opcodes[6] = {type: 5, min: 225, max: 236};// TRG
  this.rules[35].opcodes[7] = {type: 3, min: 2, max: 2};// REP
  this.rules[35].opcodes[8] = {type: 4, index: 37};// RNM(UTF8-tail)
  this.rules[35].opcodes[9] = {type: 2, children: [10,11,12]};// CAT
  this.rules[35].opcodes[10] = {type: 6, string: [237]};// TBS
  this.rules[35].opcodes[11] = {type: 5, min: 128, max: 159};// TRG
  this.rules[35].opcodes[12] = {type: 4, index: 37};// RNM(UTF8-tail)
  this.rules[35].opcodes[13] = {type: 2, children: [14,15]};// CAT
  this.rules[35].opcodes[14] = {type: 5, min: 238, max: 239};// TRG
  this.rules[35].opcodes[15] = {type: 3, min: 2, max: 2};// REP
  this.rules[35].opcodes[16] = {type: 4, index: 37};// RNM(UTF8-tail)

  /* UTF8-4 */
  this.rules[36].opcodes = [];
  this.rules[36].opcodes[0] = {type: 1, children: [1,6,10]};// ALT
  this.rules[36].opcodes[1] = {type: 2, children: [2,3,4]};// CAT
  this.rules[36].opcodes[2] = {type: 6, string: [240]};// TBS
  this.rules[36].opcodes[3] = {type: 5, min: 144, max: 191};// TRG
  this.rules[36].opcodes[4] = {type: 3, min: 2, max: 2};// REP
  this.rules[36].opcodes[5] = {type: 4, index: 37};// RNM(UTF8-tail)
  this.rules[36].opcodes[6] = {type: 2, children: [7,8]};// CAT
  this.rules[36].opcodes[7] = {type: 5, min: 241, max: 243};// TRG
  this.rules[36].opcodes[8] = {type: 3, min: 3, max: 3};// REP
  this.rules[36].opcodes[9] = {type: 4, index: 37};// RNM(UTF8-tail)
  this.rules[36].opcodes[10] = {type: 2, children: [11,12,13]};// CAT
  this.rules[36].opcodes[11] = {type: 6, string: [244]};// TBS
  this.rules[36].opcodes[12] = {type: 5, min: 128, max: 143};// TRG
  this.rules[36].opcodes[13] = {type: 3, min: 2, max: 2};// REP
  this.rules[36].opcodes[14] = {type: 4, index: 37};// RNM(UTF8-tail)

  /* UTF8-tail */
  this.rules[37].opcodes = [];
  this.rules[37].opcodes[0] = {type: 5, min: 128, max: 191};// TRG

  /* templateSlot */
  this.rules[38].opcodes = [];
  this.rules[38].opcodes[0] = {type: 1, children: [1,2]};// ALT
  this.rules[38].opcodes[1] = {type: 4, index: 39};// RNM(templateReplacementSlot)
  this.rules[38].opcodes[2] = {type: 4, index: 63};// RNM(templateInformationSlot)

  /* templateReplacementSlot */
  this.rules[39].opcodes = [];
  this.rules[39].opcodes[0] = {type: 1, children: [1,2,3,4]};// ALT
  this.rules[39].opcodes[1] = {type: 4, index: 40};// RNM(conceptReplacementSlot)
  this.rules[39].opcodes[2] = {type: 4, index: 41};// RNM(expressionReplacementSlot)
  this.rules[39].opcodes[3] = {type: 4, index: 42};// RNM(tokenReplacementSlot)
  this.rules[39].opcodes[4] = {type: 4, index: 43};// RNM(concreteValueReplacementSlot)

  /* conceptReplacementSlot */
  this.rules[40].opcodes = [];
  this.rules[40].opcodes[0] = {type: 2, children: [1,2,3,4,5,6,7,15,19]};// CAT
  this.rules[40].opcodes[1] = {type: 7, string: [91,91]};// TLS
  this.rules[40].opcodes[2] = {type: 4, index: 21};// RNM(ws)
  this.rules[40].opcodes[3] = {type: 7, string: [43]};// TLS
  this.rules[40].opcodes[4] = {type: 4, index: 21};// RNM(ws)
  this.rules[40].opcodes[5] = {type: 7, string: [105,100]};// TLS
  this.rules[40].opcodes[6] = {type: 4, index: 21};// RNM(ws)
  this.rules[40].opcodes[7] = {type: 3, min: 0, max: 1};// REP
  this.rules[40].opcodes[8] = {type: 2, children: [9,10,11,12,13,14]};// CAT
  this.rules[40].opcodes[9] = {type: 7, string: [40]};// TLS
  this.rules[40].opcodes[10] = {type: 4, index: 21};// RNM(ws)
  this.rules[40].opcodes[11] = {type: 4, index: 65};// RNM(expressionConstraint)
  this.rules[40].opcodes[12] = {type: 4, index: 21};// RNM(ws)
  this.rules[40].opcodes[13] = {type: 7, string: [41]};// TLS
  this.rules[40].opcodes[14] = {type: 4, index: 21};// RNM(ws)
  this.rules[40].opcodes[15] = {type: 3, min: 0, max: 1};// REP
  this.rules[40].opcodes[16] = {type: 2, children: [17,18]};// CAT
  this.rules[40].opcodes[17] = {type: 4, index: 59};// RNM(slotName)
  this.rules[40].opcodes[18] = {type: 4, index: 21};// RNM(ws)
  this.rules[40].opcodes[19] = {type: 7, string: [93,93]};// TLS

  /* expressionReplacementSlot */
  this.rules[41].opcodes = [];
  this.rules[41].opcodes[0] = {type: 2, children: [1,2,3,4,5,9,17,21]};// CAT
  this.rules[41].opcodes[1] = {type: 7, string: [91,91]};// TLS
  this.rules[41].opcodes[2] = {type: 4, index: 21};// RNM(ws)
  this.rules[41].opcodes[3] = {type: 7, string: [43]};// TLS
  this.rules[41].opcodes[4] = {type: 4, index: 21};// RNM(ws)
  this.rules[41].opcodes[5] = {type: 3, min: 0, max: 1};// REP
  this.rules[41].opcodes[6] = {type: 2, children: [7,8]};// CAT
  this.rules[41].opcodes[7] = {type: 7, string: [115,99,103]};// TLS
  this.rules[41].opcodes[8] = {type: 4, index: 21};// RNM(ws)
  this.rules[41].opcodes[9] = {type: 3, min: 0, max: 1};// REP
  this.rules[41].opcodes[10] = {type: 2, children: [11,12,13,14,15,16]};// CAT
  this.rules[41].opcodes[11] = {type: 7, string: [40]};// TLS
  this.rules[41].opcodes[12] = {type: 4, index: 21};// RNM(ws)
  this.rules[41].opcodes[13] = {type: 4, index: 65};// RNM(expressionConstraint)
  this.rules[41].opcodes[14] = {type: 4, index: 21};// RNM(ws)
  this.rules[41].opcodes[15] = {type: 7, string: [41]};// TLS
  this.rules[41].opcodes[16] = {type: 4, index: 21};// RNM(ws)
  this.rules[41].opcodes[17] = {type: 3, min: 0, max: 1};// REP
  this.rules[41].opcodes[18] = {type: 2, children: [19,20]};// CAT
  this.rules[41].opcodes[19] = {type: 4, index: 59};// RNM(slotName)
  this.rules[41].opcodes[20] = {type: 4, index: 21};// RNM(ws)
  this.rules[41].opcodes[21] = {type: 7, string: [93,93]};// TLS

  /* tokenReplacementSlot */
  this.rules[42].opcodes = [];
  this.rules[42].opcodes[0] = {type: 2, children: [1,2,3,4,5,6,7,15,19]};// CAT
  this.rules[42].opcodes[1] = {type: 7, string: [91,91]};// TLS
  this.rules[42].opcodes[2] = {type: 4, index: 21};// RNM(ws)
  this.rules[42].opcodes[3] = {type: 7, string: [43]};// TLS
  this.rules[42].opcodes[4] = {type: 4, index: 21};// RNM(ws)
  this.rules[42].opcodes[5] = {type: 7, string: [116,111,107]};// TLS
  this.rules[42].opcodes[6] = {type: 4, index: 21};// RNM(ws)
  this.rules[42].opcodes[7] = {type: 3, min: 0, max: 1};// REP
  this.rules[42].opcodes[8] = {type: 2, children: [9,10,11,12,13,14]};// CAT
  this.rules[42].opcodes[9] = {type: 7, string: [40]};// TLS
  this.rules[42].opcodes[10] = {type: 4, index: 21};// RNM(ws)
  this.rules[42].opcodes[11] = {type: 4, index: 47};// RNM(slotTokenSet)
  this.rules[42].opcodes[12] = {type: 4, index: 21};// RNM(ws)
  this.rules[42].opcodes[13] = {type: 7, string: [41]};// TLS
  this.rules[42].opcodes[14] = {type: 4, index: 21};// RNM(ws)
  this.rules[42].opcodes[15] = {type: 3, min: 0, max: 1};// REP
  this.rules[42].opcodes[16] = {type: 2, children: [17,18]};// CAT
  this.rules[42].opcodes[17] = {type: 4, index: 59};// RNM(slotName)
  this.rules[42].opcodes[18] = {type: 4, index: 21};// RNM(ws)
  this.rules[42].opcodes[19] = {type: 7, string: [93,93]};// TLS

  /* concreteValueReplacementSlot */
  this.rules[43].opcodes = [];
  this.rules[43].opcodes[0] = {type: 1, children: [1,2,3]};// ALT
  this.rules[43].opcodes[1] = {type: 4, index: 44};// RNM(stringReplacementSlot)
  this.rules[43].opcodes[2] = {type: 4, index: 45};// RNM(integerReplacementSlot)
  this.rules[43].opcodes[3] = {type: 4, index: 46};// RNM(decimalReplacementSlot)

  /* stringReplacementSlot */
  this.rules[44].opcodes = [];
  this.rules[44].opcodes[0] = {type: 2, children: [1,2,3,4,5,6,7,15,19]};// CAT
  this.rules[44].opcodes[1] = {type: 7, string: [91,91]};// TLS
  this.rules[44].opcodes[2] = {type: 4, index: 21};// RNM(ws)
  this.rules[44].opcodes[3] = {type: 7, string: [43]};// TLS
  this.rules[44].opcodes[4] = {type: 4, index: 21};// RNM(ws)
  this.rules[44].opcodes[5] = {type: 7, string: [115,116,114]};// TLS
  this.rules[44].opcodes[6] = {type: 4, index: 21};// RNM(ws)
  this.rules[44].opcodes[7] = {type: 3, min: 0, max: 1};// REP
  this.rules[44].opcodes[8] = {type: 2, children: [9,10,11,12,13,14]};// CAT
  this.rules[44].opcodes[9] = {type: 7, string: [40]};// TLS
  this.rules[44].opcodes[10] = {type: 4, index: 21};// RNM(ws)
  this.rules[44].opcodes[11] = {type: 4, index: 48};// RNM(slotStringSet)
  this.rules[44].opcodes[12] = {type: 4, index: 21};// RNM(ws)
  this.rules[44].opcodes[13] = {type: 7, string: [41]};// TLS
  this.rules[44].opcodes[14] = {type: 4, index: 21};// RNM(ws)
  this.rules[44].opcodes[15] = {type: 3, min: 0, max: 1};// REP
  this.rules[44].opcodes[16] = {type: 2, children: [17,18]};// CAT
  this.rules[44].opcodes[17] = {type: 4, index: 59};// RNM(slotName)
  this.rules[44].opcodes[18] = {type: 4, index: 21};// RNM(ws)
  this.rules[44].opcodes[19] = {type: 7, string: [93,93]};// TLS

  /* integerReplacementSlot */
  this.rules[45].opcodes = [];
  this.rules[45].opcodes[0] = {type: 2, children: [1,2,3,4,5,6,7,15,19]};// CAT
  this.rules[45].opcodes[1] = {type: 7, string: [91,91]};// TLS
  this.rules[45].opcodes[2] = {type: 4, index: 21};// RNM(ws)
  this.rules[45].opcodes[3] = {type: 7, string: [43]};// TLS
  this.rules[45].opcodes[4] = {type: 4, index: 21};// RNM(ws)
  this.rules[45].opcodes[5] = {type: 7, string: [105,110,116]};// TLS
  this.rules[45].opcodes[6] = {type: 4, index: 21};// RNM(ws)
  this.rules[45].opcodes[7] = {type: 3, min: 0, max: 1};// REP
  this.rules[45].opcodes[8] = {type: 2, children: [9,10,11,12,13,14]};// CAT
  this.rules[45].opcodes[9] = {type: 7, string: [40]};// TLS
  this.rules[45].opcodes[10] = {type: 4, index: 21};// RNM(ws)
  this.rules[45].opcodes[11] = {type: 4, index: 49};// RNM(slotIntegerSet)
  this.rules[45].opcodes[12] = {type: 4, index: 21};// RNM(ws)
  this.rules[45].opcodes[13] = {type: 7, string: [41]};// TLS
  this.rules[45].opcodes[14] = {type: 4, index: 21};// RNM(ws)
  this.rules[45].opcodes[15] = {type: 3, min: 0, max: 1};// REP
  this.rules[45].opcodes[16] = {type: 2, children: [17,18]};// CAT
  this.rules[45].opcodes[17] = {type: 4, index: 59};// RNM(slotName)
  this.rules[45].opcodes[18] = {type: 4, index: 21};// RNM(ws)
  this.rules[45].opcodes[19] = {type: 7, string: [93,93]};// TLS

  /* decimalReplacementSlot */
  this.rules[46].opcodes = [];
  this.rules[46].opcodes[0] = {type: 2, children: [1,2,3,4,5,6,7,15,19]};// CAT
  this.rules[46].opcodes[1] = {type: 7, string: [91,91]};// TLS
  this.rules[46].opcodes[2] = {type: 4, index: 21};// RNM(ws)
  this.rules[46].opcodes[3] = {type: 7, string: [43]};// TLS
  this.rules[46].opcodes[4] = {type: 4, index: 21};// RNM(ws)
  this.rules[46].opcodes[5] = {type: 7, string: [100,101,99]};// TLS
  this.rules[46].opcodes[6] = {type: 4, index: 21};// RNM(ws)
  this.rules[46].opcodes[7] = {type: 3, min: 0, max: 1};// REP
  this.rules[46].opcodes[8] = {type: 2, children: [9,10,11,12,13,14]};// CAT
  this.rules[46].opcodes[9] = {type: 7, string: [40]};// TLS
  this.rules[46].opcodes[10] = {type: 4, index: 21};// RNM(ws)
  this.rules[46].opcodes[11] = {type: 4, index: 50};// RNM(slotDecimalSet)
  this.rules[46].opcodes[12] = {type: 4, index: 21};// RNM(ws)
  this.rules[46].opcodes[13] = {type: 7, string: [41]};// TLS
  this.rules[46].opcodes[14] = {type: 4, index: 21};// RNM(ws)
  this.rules[46].opcodes[15] = {type: 3, min: 0, max: 1};// REP
  this.rules[46].opcodes[16] = {type: 2, children: [17,18]};// CAT
  this.rules[46].opcodes[17] = {type: 4, index: 59};// RNM(slotName)
  this.rules[46].opcodes[18] = {type: 4, index: 21};// RNM(ws)
  this.rules[46].opcodes[19] = {type: 7, string: [93,93]};// TLS

  /* slotTokenSet */
  this.rules[47].opcodes = [];
  this.rules[47].opcodes[0] = {type: 2, children: [1,2]};// CAT
  this.rules[47].opcodes[1] = {type: 4, index: 60};// RNM(slotToken)
  this.rules[47].opcodes[2] = {type: 3, min: 0, max: Infinity};// REP
  this.rules[47].opcodes[3] = {type: 2, children: [4,5]};// CAT
  this.rules[47].opcodes[4] = {type: 4, index: 110};// RNM(mws)
  this.rules[47].opcodes[5] = {type: 4, index: 60};// RNM(slotToken)

  /* slotStringSet */
  this.rules[48].opcodes = [];
  this.rules[48].opcodes[0] = {type: 2, children: [1,2]};// CAT
  this.rules[48].opcodes[1] = {type: 4, index: 61};// RNM(slotString)
  this.rules[48].opcodes[2] = {type: 3, min: 0, max: Infinity};// REP
  this.rules[48].opcodes[3] = {type: 2, children: [4,5]};// CAT
  this.rules[48].opcodes[4] = {type: 4, index: 110};// RNM(mws)
  this.rules[48].opcodes[5] = {type: 4, index: 61};// RNM(slotString)

  /* slotIntegerSet */
  this.rules[49].opcodes = [];
  this.rules[49].opcodes[0] = {type: 2, children: [1,6]};// CAT
  this.rules[49].opcodes[1] = {type: 1, children: [2,5]};// ALT
  this.rules[49].opcodes[2] = {type: 2, children: [3,4]};// CAT
  this.rules[49].opcodes[3] = {type: 7, string: [35]};// TLS
  this.rules[49].opcodes[4] = {type: 4, index: 18};// RNM(integerValue)
  this.rules[49].opcodes[5] = {type: 4, index: 51};// RNM(slotIntegerRange)
  this.rules[49].opcodes[6] = {type: 3, min: 0, max: Infinity};// REP
  this.rules[49].opcodes[7] = {type: 2, children: [8,9]};// CAT
  this.rules[49].opcodes[8] = {type: 4, index: 110};// RNM(mws)
  this.rules[49].opcodes[9] = {type: 1, children: [10,13]};// ALT
  this.rules[49].opcodes[10] = {type: 2, children: [11,12]};// CAT
  this.rules[49].opcodes[11] = {type: 7, string: [35]};// TLS
  this.rules[49].opcodes[12] = {type: 4, index: 18};// RNM(integerValue)
  this.rules[49].opcodes[13] = {type: 4, index: 51};// RNM(slotIntegerRange)

  /* slotDecimalSet */
  this.rules[50].opcodes = [];
  this.rules[50].opcodes[0] = {type: 2, children: [1,6]};// CAT
  this.rules[50].opcodes[1] = {type: 1, children: [2,5]};// ALT
  this.rules[50].opcodes[2] = {type: 2, children: [3,4]};// CAT
  this.rules[50].opcodes[3] = {type: 7, string: [35]};// TLS
  this.rules[50].opcodes[4] = {type: 4, index: 19};// RNM(decimalValue)
  this.rules[50].opcodes[5] = {type: 4, index: 54};// RNM(slotDecimalRange)
  this.rules[50].opcodes[6] = {type: 3, min: 0, max: Infinity};// REP
  this.rules[50].opcodes[7] = {type: 2, children: [8,9]};// CAT
  this.rules[50].opcodes[8] = {type: 4, index: 110};// RNM(mws)
  this.rules[50].opcodes[9] = {type: 1, children: [10,13]};// ALT
  this.rules[50].opcodes[10] = {type: 2, children: [11,12]};// CAT
  this.rules[50].opcodes[11] = {type: 7, string: [35]};// TLS
  this.rules[50].opcodes[12] = {type: 4, index: 19};// RNM(decimalValue)
  this.rules[50].opcodes[13] = {type: 4, index: 54};// RNM(slotDecimalRange)

  /* slotIntegerRange */
  this.rules[51].opcodes = [];
  this.rules[51].opcodes[0] = {type: 1, children: [1,6]};// ALT
  this.rules[51].opcodes[1] = {type: 2, children: [2,3,4]};// CAT
  this.rules[51].opcodes[2] = {type: 4, index: 52};// RNM(slotIntegerMinimum)
  this.rules[51].opcodes[3] = {type: 4, index: 101};// RNM(to)
  this.rules[51].opcodes[4] = {type: 3, min: 0, max: 1};// REP
  this.rules[51].opcodes[5] = {type: 4, index: 53};// RNM(slotIntegerMaximum)
  this.rules[51].opcodes[6] = {type: 2, children: [7,8]};// CAT
  this.rules[51].opcodes[7] = {type: 4, index: 101};// RNM(to)
  this.rules[51].opcodes[8] = {type: 4, index: 53};// RNM(slotIntegerMaximum)

  /* slotIntegerMinimum */
  this.rules[52].opcodes = [];
  this.rules[52].opcodes[0] = {type: 2, children: [1,3,4]};// CAT
  this.rules[52].opcodes[1] = {type: 3, min: 0, max: 1};// REP
  this.rules[52].opcodes[2] = {type: 4, index: 57};// RNM(exclusiveMinimum)
  this.rules[52].opcodes[3] = {type: 7, string: [35]};// TLS
  this.rules[52].opcodes[4] = {type: 4, index: 18};// RNM(integerValue)

  /* slotIntegerMaximum */
  this.rules[53].opcodes = [];
  this.rules[53].opcodes[0] = {type: 2, children: [1,3,4]};// CAT
  this.rules[53].opcodes[1] = {type: 3, min: 0, max: 1};// REP
  this.rules[53].opcodes[2] = {type: 4, index: 58};// RNM(exclusiveMaximum)
  this.rules[53].opcodes[3] = {type: 7, string: [35]};// TLS
  this.rules[53].opcodes[4] = {type: 4, index: 18};// RNM(integerValue)

  /* slotDecimalRange */
  this.rules[54].opcodes = [];
  this.rules[54].opcodes[0] = {type: 1, children: [1,6]};// ALT
  this.rules[54].opcodes[1] = {type: 2, children: [2,3,4]};// CAT
  this.rules[54].opcodes[2] = {type: 4, index: 55};// RNM(slotDecimalMinimum)
  this.rules[54].opcodes[3] = {type: 4, index: 101};// RNM(to)
  this.rules[54].opcodes[4] = {type: 3, min: 0, max: 1};// REP
  this.rules[54].opcodes[5] = {type: 4, index: 56};// RNM(slotDecimalMaximum)
  this.rules[54].opcodes[6] = {type: 2, children: [7,8]};// CAT
  this.rules[54].opcodes[7] = {type: 4, index: 101};// RNM(to)
  this.rules[54].opcodes[8] = {type: 4, index: 56};// RNM(slotDecimalMaximum)

  /* slotDecimalMinimum */
  this.rules[55].opcodes = [];
  this.rules[55].opcodes[0] = {type: 2, children: [1,3,4]};// CAT
  this.rules[55].opcodes[1] = {type: 3, min: 0, max: 1};// REP
  this.rules[55].opcodes[2] = {type: 4, index: 57};// RNM(exclusiveMinimum)
  this.rules[55].opcodes[3] = {type: 7, string: [35]};// TLS
  this.rules[55].opcodes[4] = {type: 4, index: 19};// RNM(decimalValue)

  /* slotDecimalMaximum */
  this.rules[56].opcodes = [];
  this.rules[56].opcodes[0] = {type: 2, children: [1,3,4]};// CAT
  this.rules[56].opcodes[1] = {type: 3, min: 0, max: 1};// REP
  this.rules[56].opcodes[2] = {type: 4, index: 58};// RNM(exclusiveMaximum)
  this.rules[56].opcodes[3] = {type: 7, string: [35]};// TLS
  this.rules[56].opcodes[4] = {type: 4, index: 19};// RNM(decimalValue)

  /* exclusiveMinimum */
  this.rules[57].opcodes = [];
  this.rules[57].opcodes[0] = {type: 7, string: [62]};// TLS

  /* exclusiveMaximum */
  this.rules[58].opcodes = [];
  this.rules[58].opcodes[0] = {type: 7, string: [60]};// TLS

  /* slotName */
  this.rules[59].opcodes = [];
  this.rules[59].opcodes[0] = {type: 2, children: [1,2]};// CAT
  this.rules[59].opcodes[1] = {type: 7, string: [64]};// TLS
  this.rules[59].opcodes[2] = {type: 1, children: [3,4]};// ALT
  this.rules[59].opcodes[3] = {type: 4, index: 62};// RNM(nonQuoteStringValue)
  this.rules[59].opcodes[4] = {type: 4, index: 61};// RNM(slotString)

  /* slotToken */
  this.rules[60].opcodes = [];
  this.rules[60].opcodes[0] = {type: 1, children: [1,2,3,4,5,6,7,8,9,10]};// ALT
  this.rules[60].opcodes[1] = {type: 4, index: 2};// RNM(definitionStatus)
  this.rules[60].opcodes[2] = {type: 4, index: 76};// RNM(memberOf)
  this.rules[60].opcodes[3] = {type: 4, index: 79};// RNM(constraintOperator)
  this.rules[60].opcodes[4] = {type: 4, index: 86};// RNM(conjunction)
  this.rules[60].opcodes[5] = {type: 4, index: 87};// RNM(disjunction)
  this.rules[60].opcodes[6] = {type: 4, index: 88};// RNM(exclusion)
  this.rules[60].opcodes[7] = {type: 4, index: 104};// RNM(reverseFlag)
  this.rules[60].opcodes[8] = {type: 4, index: 106};// RNM(expressionComparisonOperator)
  this.rules[60].opcodes[9] = {type: 4, index: 107};// RNM(numericComparisonOperator)
  this.rules[60].opcodes[10] = {type: 4, index: 108};// RNM(stringComparisonOperator)

  /* slotString */
  this.rules[61].opcodes = [];
  this.rules[61].opcodes[0] = {type: 2, children: [1,2,3]};// CAT
  this.rules[61].opcodes[1] = {type: 4, index: 26};// RNM(QM)
  this.rules[61].opcodes[2] = {type: 4, index: 16};// RNM(stringValue)
  this.rules[61].opcodes[3] = {type: 4, index: 26};// RNM(QM)

  /* nonQuoteStringValue */
  this.rules[62].opcodes = [];
  this.rules[62].opcodes[0] = {type: 3, min: 0, max: Infinity};// REP
  this.rules[62].opcodes[1] = {type: 1, children: [2,3,4,5,6,7]};// ALT
  this.rules[62].opcodes[2] = {type: 6, string: [33]};// TBS
  this.rules[62].opcodes[3] = {type: 5, min: 35, max: 38};// TRG
  this.rules[62].opcodes[4] = {type: 5, min: 40, max: 63};// TRG
  this.rules[62].opcodes[5] = {type: 5, min: 65, max: 90};// TRG
  this.rules[62].opcodes[6] = {type: 6, string: [92]};// TBS
  this.rules[62].opcodes[7] = {type: 5, min: 94, max: 126};// TRG

  /* templateInformationSlot */
  this.rules[63].opcodes = [];
  this.rules[63].opcodes[0] = {type: 2, children: [1,2,3,4,5]};// CAT
  this.rules[63].opcodes[1] = {type: 7, string: [91,91]};// TLS
  this.rules[63].opcodes[2] = {type: 4, index: 21};// RNM(ws)
  this.rules[63].opcodes[3] = {type: 4, index: 64};// RNM(slotInformation)
  this.rules[63].opcodes[4] = {type: 4, index: 21};// RNM(ws)
  this.rules[63].opcodes[5] = {type: 7, string: [93,93]};// TLS

  /* slotInformation */
  this.rules[64].opcodes = [];
  this.rules[64].opcodes[0] = {type: 2, children: [1,5]};// CAT
  this.rules[64].opcodes[1] = {type: 3, min: 0, max: 1};// REP
  this.rules[64].opcodes[2] = {type: 2, children: [3,4]};// CAT
  this.rules[64].opcodes[3] = {type: 4, index: 99};// RNM(cardinality)
  this.rules[64].opcodes[4] = {type: 4, index: 21};// RNM(ws)
  this.rules[64].opcodes[5] = {type: 3, min: 0, max: 1};// REP
  this.rules[64].opcodes[6] = {type: 2, children: [7,8]};// CAT
  this.rules[64].opcodes[7] = {type: 4, index: 59};// RNM(slotName)
  this.rules[64].opcodes[8] = {type: 4, index: 21};// RNM(ws)

  /* expressionConstraint */
  this.rules[65].opcodes = [];
  this.rules[65].opcodes[0] = {type: 2, children: [1,2,7]};// CAT
  this.rules[65].opcodes[1] = {type: 4, index: 21};// RNM(ws)
  this.rules[65].opcodes[2] = {type: 1, children: [3,4,5,6]};// ALT
  this.rules[65].opcodes[3] = {type: 4, index: 66};// RNM(refinedExpressionConstraint)
  this.rules[65].opcodes[4] = {type: 4, index: 67};// RNM(compoundExpressionConstraint)
  this.rules[65].opcodes[5] = {type: 4, index: 71};// RNM(dottedExpressionConstraint)
  this.rules[65].opcodes[6] = {type: 4, index: 73};// RNM(subExpressionConstraint)
  this.rules[65].opcodes[7] = {type: 4, index: 21};// RNM(ws)

  /* refinedExpressionConstraint */
  this.rules[66].opcodes = [];
  this.rules[66].opcodes[0] = {type: 2, children: [1,2,3,4,5]};// CAT
  this.rules[66].opcodes[1] = {type: 4, index: 73};// RNM(subExpressionConstraint)
  this.rules[66].opcodes[2] = {type: 4, index: 21};// RNM(ws)
  this.rules[66].opcodes[3] = {type: 7, string: [58]};// TLS
  this.rules[66].opcodes[4] = {type: 4, index: 21};// RNM(ws)
  this.rules[66].opcodes[5] = {type: 4, index: 89};// RNM(eclRefinement)

  /* compoundExpressionConstraint */
  this.rules[67].opcodes = [];
  this.rules[67].opcodes[0] = {type: 1, children: [1,2,3]};// ALT
  this.rules[67].opcodes[1] = {type: 4, index: 68};// RNM(conjunctionExpressionConstraint)
  this.rules[67].opcodes[2] = {type: 4, index: 69};// RNM(disjunctionExpressionConstraint)
  this.rules[67].opcodes[3] = {type: 4, index: 70};// RNM(exclusionExpressionConstraint)

  /* conjunctionExpressionConstraint */
  this.rules[68].opcodes = [];
  this.rules[68].opcodes[0] = {type: 2, children: [1,2]};// CAT
  this.rules[68].opcodes[1] = {type: 4, index: 73};// RNM(subExpressionConstraint)
  this.rules[68].opcodes[2] = {type: 3, min: 1, max: Infinity};// REP
  this.rules[68].opcodes[3] = {type: 2, children: [4,5,6,7]};// CAT
  this.rules[68].opcodes[4] = {type: 4, index: 21};// RNM(ws)
  this.rules[68].opcodes[5] = {type: 4, index: 86};// RNM(conjunction)
  this.rules[68].opcodes[6] = {type: 4, index: 21};// RNM(ws)
  this.rules[68].opcodes[7] = {type: 4, index: 73};// RNM(subExpressionConstraint)

  /* disjunctionExpressionConstraint */
  this.rules[69].opcodes = [];
  this.rules[69].opcodes[0] = {type: 2, children: [1,2]};// CAT
  this.rules[69].opcodes[1] = {type: 4, index: 73};// RNM(subExpressionConstraint)
  this.rules[69].opcodes[2] = {type: 3, min: 1, max: Infinity};// REP
  this.rules[69].opcodes[3] = {type: 2, children: [4,5,6,7]};// CAT
  this.rules[69].opcodes[4] = {type: 4, index: 21};// RNM(ws)
  this.rules[69].opcodes[5] = {type: 4, index: 87};// RNM(disjunction)
  this.rules[69].opcodes[6] = {type: 4, index: 21};// RNM(ws)
  this.rules[69].opcodes[7] = {type: 4, index: 73};// RNM(subExpressionConstraint)

  /* exclusionExpressionConstraint */
  this.rules[70].opcodes = [];
  this.rules[70].opcodes[0] = {type: 2, children: [1,2,3,4,5]};// CAT
  this.rules[70].opcodes[1] = {type: 4, index: 73};// RNM(subExpressionConstraint)
  this.rules[70].opcodes[2] = {type: 4, index: 21};// RNM(ws)
  this.rules[70].opcodes[3] = {type: 4, index: 88};// RNM(exclusion)
  this.rules[70].opcodes[4] = {type: 4, index: 21};// RNM(ws)
  this.rules[70].opcodes[5] = {type: 4, index: 73};// RNM(subExpressionConstraint)

  /* dottedExpressionConstraint */
  this.rules[71].opcodes = [];
  this.rules[71].opcodes[0] = {type: 2, children: [1,2]};// CAT
  this.rules[71].opcodes[1] = {type: 4, index: 73};// RNM(subExpressionConstraint)
  this.rules[71].opcodes[2] = {type: 3, min: 1, max: Infinity};// REP
  this.rules[71].opcodes[3] = {type: 2, children: [4,5]};// CAT
  this.rules[71].opcodes[4] = {type: 4, index: 21};// RNM(ws)
  this.rules[71].opcodes[5] = {type: 4, index: 72};// RNM(dottedExpressionAttribute)

  /* dottedExpressionAttribute */
  this.rules[72].opcodes = [];
  this.rules[72].opcodes[0] = {type: 2, children: [1,2,3]};// CAT
  this.rules[72].opcodes[1] = {type: 4, index: 75};// RNM(dot)
  this.rules[72].opcodes[2] = {type: 4, index: 21};// RNM(ws)
  this.rules[72].opcodes[3] = {type: 4, index: 105};// RNM(eclAttributeName)

  /* subExpressionConstraint */
  this.rules[73].opcodes = [];
  this.rules[73].opcodes[0] = {type: 2, children: [1,5,9]};// CAT
  this.rules[73].opcodes[1] = {type: 3, min: 0, max: 1};// REP
  this.rules[73].opcodes[2] = {type: 2, children: [3,4]};// CAT
  this.rules[73].opcodes[3] = {type: 4, index: 79};// RNM(constraintOperator)
  this.rules[73].opcodes[4] = {type: 4, index: 21};// RNM(ws)
  this.rules[73].opcodes[5] = {type: 3, min: 0, max: 1};// REP
  this.rules[73].opcodes[6] = {type: 2, children: [7,8]};// CAT
  this.rules[73].opcodes[7] = {type: 4, index: 76};// RNM(memberOf)
  this.rules[73].opcodes[8] = {type: 4, index: 21};// RNM(ws)
  this.rules[73].opcodes[9] = {type: 1, children: [10,11]};// ALT
  this.rules[73].opcodes[10] = {type: 4, index: 74};// RNM(eclFocusConcept)
  this.rules[73].opcodes[11] = {type: 2, children: [12,13,14,15,16]};// CAT
  this.rules[73].opcodes[12] = {type: 7, string: [40]};// TLS
  this.rules[73].opcodes[13] = {type: 4, index: 21};// RNM(ws)
  this.rules[73].opcodes[14] = {type: 4, index: 65};// RNM(expressionConstraint)
  this.rules[73].opcodes[15] = {type: 4, index: 21};// RNM(ws)
  this.rules[73].opcodes[16] = {type: 7, string: [41]};// TLS

  /* eclFocusConcept */
  this.rules[74].opcodes = [];
  this.rules[74].opcodes[0] = {type: 1, children: [1,2]};// ALT
  this.rules[74].opcodes[1] = {type: 4, index: 77};// RNM(eclConceptReference)
  this.rules[74].opcodes[2] = {type: 4, index: 78};// RNM(wildCard)

  /* dot */
  this.rules[75].opcodes = [];
  this.rules[75].opcodes[0] = {type: 7, string: [46]};// TLS

  /* memberOf */
  this.rules[76].opcodes = [];
  this.rules[76].opcodes[0] = {type: 7, string: [94]};// TLS

  /* eclConceptReference */
  this.rules[77].opcodes = [];
  this.rules[77].opcodes[0] = {type: 2, children: [1,2]};// CAT
  this.rules[77].opcodes[1] = {type: 4, index: 7};// RNM(conceptId)
  this.rules[77].opcodes[2] = {type: 3, min: 0, max: 1};// REP
  this.rules[77].opcodes[3] = {type: 2, children: [4,5,6,7,8,9]};// CAT
  this.rules[77].opcodes[4] = {type: 4, index: 21};// RNM(ws)
  this.rules[77].opcodes[5] = {type: 7, string: [124]};// TLS
  this.rules[77].opcodes[6] = {type: 4, index: 21};// RNM(ws)
  this.rules[77].opcodes[7] = {type: 4, index: 8};// RNM(term)
  this.rules[77].opcodes[8] = {type: 4, index: 21};// RNM(ws)
  this.rules[77].opcodes[9] = {type: 7, string: [124]};// TLS

  /* wildCard */
  this.rules[78].opcodes = [];
  this.rules[78].opcodes[0] = {type: 7, string: [42]};// TLS

  /* constraintOperator */
  this.rules[79].opcodes = [];
  this.rules[79].opcodes[0] = {type: 1, children: [1,2,3,4,5,6]};// ALT
  this.rules[79].opcodes[1] = {type: 4, index: 82};// RNM(childOf)
  this.rules[79].opcodes[2] = {type: 4, index: 81};// RNM(descendantOrSelfOf)
  this.rules[79].opcodes[3] = {type: 4, index: 80};// RNM(descendantOf)
  this.rules[79].opcodes[4] = {type: 4, index: 85};// RNM(parentOf)
  this.rules[79].opcodes[5] = {type: 4, index: 84};// RNM(ancestorOrSelfOf)
  this.rules[79].opcodes[6] = {type: 4, index: 83};// RNM(ancestorOf)

  /* descendantOf */
  this.rules[80].opcodes = [];
  this.rules[80].opcodes[0] = {type: 7, string: [60]};// TLS

  /* descendantOrSelfOf */
  this.rules[81].opcodes = [];
  this.rules[81].opcodes[0] = {type: 7, string: [60,60]};// TLS

  /* childOf */
  this.rules[82].opcodes = [];
  this.rules[82].opcodes[0] = {type: 7, string: [60,33]};// TLS

  /* ancestorOf */
  this.rules[83].opcodes = [];
  this.rules[83].opcodes[0] = {type: 7, string: [62]};// TLS

  /* ancestorOrSelfOf */
  this.rules[84].opcodes = [];
  this.rules[84].opcodes[0] = {type: 7, string: [62,62]};// TLS

  /* parentOf */
  this.rules[85].opcodes = [];
  this.rules[85].opcodes[0] = {type: 7, string: [62,33]};// TLS

  /* conjunction */
  this.rules[86].opcodes = [];
  this.rules[86].opcodes[0] = {type: 1, children: [1,12]};// ALT
  this.rules[86].opcodes[1] = {type: 2, children: [2,5,8,11]};// CAT
  this.rules[86].opcodes[2] = {type: 1, children: [3,4]};// ALT
  this.rules[86].opcodes[3] = {type: 7, string: [97]};// TLS
  this.rules[86].opcodes[4] = {type: 7, string: [97]};// TLS
  this.rules[86].opcodes[5] = {type: 1, children: [6,7]};// ALT
  this.rules[86].opcodes[6] = {type: 7, string: [110]};// TLS
  this.rules[86].opcodes[7] = {type: 7, string: [110]};// TLS
  this.rules[86].opcodes[8] = {type: 1, children: [9,10]};// ALT
  this.rules[86].opcodes[9] = {type: 7, string: [100]};// TLS
  this.rules[86].opcodes[10] = {type: 7, string: [100]};// TLS
  this.rules[86].opcodes[11] = {type: 4, index: 110};// RNM(mws)
  this.rules[86].opcodes[12] = {type: 7, string: [44]};// TLS

  /* disjunction */
  this.rules[87].opcodes = [];
  this.rules[87].opcodes[0] = {type: 2, children: [1,4,7]};// CAT
  this.rules[87].opcodes[1] = {type: 1, children: [2,3]};// ALT
  this.rules[87].opcodes[2] = {type: 7, string: [111]};// TLS
  this.rules[87].opcodes[3] = {type: 7, string: [111]};// TLS
  this.rules[87].opcodes[4] = {type: 1, children: [5,6]};// ALT
  this.rules[87].opcodes[5] = {type: 7, string: [114]};// TLS
  this.rules[87].opcodes[6] = {type: 7, string: [114]};// TLS
  this.rules[87].opcodes[7] = {type: 4, index: 110};// RNM(mws)

  /* exclusion */
  this.rules[88].opcodes = [];
  this.rules[88].opcodes[0] = {type: 2, children: [1,4,7,10,13,16]};// CAT
  this.rules[88].opcodes[1] = {type: 1, children: [2,3]};// ALT
  this.rules[88].opcodes[2] = {type: 7, string: [109]};// TLS
  this.rules[88].opcodes[3] = {type: 7, string: [109]};// TLS
  this.rules[88].opcodes[4] = {type: 1, children: [5,6]};// ALT
  this.rules[88].opcodes[5] = {type: 7, string: [105]};// TLS
  this.rules[88].opcodes[6] = {type: 7, string: [105]};// TLS
  this.rules[88].opcodes[7] = {type: 1, children: [8,9]};// ALT
  this.rules[88].opcodes[8] = {type: 7, string: [110]};// TLS
  this.rules[88].opcodes[9] = {type: 7, string: [110]};// TLS
  this.rules[88].opcodes[10] = {type: 1, children: [11,12]};// ALT
  this.rules[88].opcodes[11] = {type: 7, string: [117]};// TLS
  this.rules[88].opcodes[12] = {type: 7, string: [117]};// TLS
  this.rules[88].opcodes[13] = {type: 1, children: [14,15]};// ALT
  this.rules[88].opcodes[14] = {type: 7, string: [115]};// TLS
  this.rules[88].opcodes[15] = {type: 7, string: [115]};// TLS
  this.rules[88].opcodes[16] = {type: 4, index: 110};// RNM(mws)

  /* eclRefinement */
  this.rules[89].opcodes = [];
  this.rules[89].opcodes[0] = {type: 2, children: [1,2,3]};// CAT
  this.rules[89].opcodes[1] = {type: 4, index: 92};// RNM(subRefinement)
  this.rules[89].opcodes[2] = {type: 4, index: 21};// RNM(ws)
  this.rules[89].opcodes[3] = {type: 3, min: 0, max: 1};// REP
  this.rules[89].opcodes[4] = {type: 1, children: [5,6]};// ALT
  this.rules[89].opcodes[5] = {type: 4, index: 90};// RNM(conjunctionRefinementSet)
  this.rules[89].opcodes[6] = {type: 4, index: 91};// RNM(disjunctionRefinementSet)

  /* conjunctionRefinementSet */
  this.rules[90].opcodes = [];
  this.rules[90].opcodes[0] = {type: 3, min: 1, max: Infinity};// REP
  this.rules[90].opcodes[1] = {type: 2, children: [2,3,4,5]};// CAT
  this.rules[90].opcodes[2] = {type: 4, index: 21};// RNM(ws)
  this.rules[90].opcodes[3] = {type: 4, index: 86};// RNM(conjunction)
  this.rules[90].opcodes[4] = {type: 4, index: 21};// RNM(ws)
  this.rules[90].opcodes[5] = {type: 4, index: 92};// RNM(subRefinement)

  /* disjunctionRefinementSet */
  this.rules[91].opcodes = [];
  this.rules[91].opcodes[0] = {type: 3, min: 1, max: Infinity};// REP
  this.rules[91].opcodes[1] = {type: 2, children: [2,3,4,5]};// CAT
  this.rules[91].opcodes[2] = {type: 4, index: 21};// RNM(ws)
  this.rules[91].opcodes[3] = {type: 4, index: 87};// RNM(disjunction)
  this.rules[91].opcodes[4] = {type: 4, index: 21};// RNM(ws)
  this.rules[91].opcodes[5] = {type: 4, index: 92};// RNM(subRefinement)

  /* subRefinement */
  this.rules[92].opcodes = [];
  this.rules[92].opcodes[0] = {type: 1, children: [1,2,3]};// ALT
  this.rules[92].opcodes[1] = {type: 4, index: 93};// RNM(eclAttributeSet)
  this.rules[92].opcodes[2] = {type: 4, index: 97};// RNM(eclAttributeGroup)
  this.rules[92].opcodes[3] = {type: 2, children: [4,5,6,7,8]};// CAT
  this.rules[92].opcodes[4] = {type: 7, string: [40]};// TLS
  this.rules[92].opcodes[5] = {type: 4, index: 21};// RNM(ws)
  this.rules[92].opcodes[6] = {type: 4, index: 89};// RNM(eclRefinement)
  this.rules[92].opcodes[7] = {type: 4, index: 21};// RNM(ws)
  this.rules[92].opcodes[8] = {type: 7, string: [41]};// TLS

  /* eclAttributeSet */
  this.rules[93].opcodes = [];
  this.rules[93].opcodes[0] = {type: 2, children: [1,2,3]};// CAT
  this.rules[93].opcodes[1] = {type: 4, index: 96};// RNM(subAttributeSet)
  this.rules[93].opcodes[2] = {type: 4, index: 21};// RNM(ws)
  this.rules[93].opcodes[3] = {type: 3, min: 0, max: 1};// REP
  this.rules[93].opcodes[4] = {type: 1, children: [5,6]};// ALT
  this.rules[93].opcodes[5] = {type: 4, index: 94};// RNM(conjunctionAttributeSet)
  this.rules[93].opcodes[6] = {type: 4, index: 95};// RNM(disjunctionAttributeSet)

  /* conjunctionAttributeSet */
  this.rules[94].opcodes = [];
  this.rules[94].opcodes[0] = {type: 3, min: 1, max: Infinity};// REP
  this.rules[94].opcodes[1] = {type: 2, children: [2,3,4,5]};// CAT
  this.rules[94].opcodes[2] = {type: 4, index: 21};// RNM(ws)
  this.rules[94].opcodes[3] = {type: 4, index: 86};// RNM(conjunction)
  this.rules[94].opcodes[4] = {type: 4, index: 21};// RNM(ws)
  this.rules[94].opcodes[5] = {type: 4, index: 96};// RNM(subAttributeSet)

  /* disjunctionAttributeSet */
  this.rules[95].opcodes = [];
  this.rules[95].opcodes[0] = {type: 3, min: 1, max: Infinity};// REP
  this.rules[95].opcodes[1] = {type: 2, children: [2,3,4,5]};// CAT
  this.rules[95].opcodes[2] = {type: 4, index: 21};// RNM(ws)
  this.rules[95].opcodes[3] = {type: 4, index: 87};// RNM(disjunction)
  this.rules[95].opcodes[4] = {type: 4, index: 21};// RNM(ws)
  this.rules[95].opcodes[5] = {type: 4, index: 96};// RNM(subAttributeSet)

  /* subAttributeSet */
  this.rules[96].opcodes = [];
  this.rules[96].opcodes[0] = {type: 1, children: [1,2]};// ALT
  this.rules[96].opcodes[1] = {type: 4, index: 98};// RNM(eclAttribute)
  this.rules[96].opcodes[2] = {type: 2, children: [3,4,5,6,7]};// CAT
  this.rules[96].opcodes[3] = {type: 7, string: [40]};// TLS
  this.rules[96].opcodes[4] = {type: 4, index: 21};// RNM(ws)
  this.rules[96].opcodes[5] = {type: 4, index: 93};// RNM(eclAttributeSet)
  this.rules[96].opcodes[6] = {type: 4, index: 21};// RNM(ws)
  this.rules[96].opcodes[7] = {type: 7, string: [41]};// TLS

  /* eclAttributeGroup */
  this.rules[97].opcodes = [];
  this.rules[97].opcodes[0] = {type: 2, children: [1,7,8,9,10,11]};// CAT
  this.rules[97].opcodes[1] = {type: 3, min: 0, max: 1};// REP
  this.rules[97].opcodes[2] = {type: 2, children: [3,4,5,6]};// CAT
  this.rules[97].opcodes[3] = {type: 7, string: [91]};// TLS
  this.rules[97].opcodes[4] = {type: 4, index: 99};// RNM(cardinality)
  this.rules[97].opcodes[5] = {type: 7, string: [93]};// TLS
  this.rules[97].opcodes[6] = {type: 4, index: 21};// RNM(ws)
  this.rules[97].opcodes[7] = {type: 7, string: [123]};// TLS
  this.rules[97].opcodes[8] = {type: 4, index: 21};// RNM(ws)
  this.rules[97].opcodes[9] = {type: 4, index: 93};// RNM(eclAttributeSet)
  this.rules[97].opcodes[10] = {type: 4, index: 21};// RNM(ws)
  this.rules[97].opcodes[11] = {type: 7, string: [125]};// TLS

  /* eclAttribute */
  this.rules[98].opcodes = [];
  this.rules[98].opcodes[0] = {type: 2, children: [1,7,11,12,13]};// CAT
  this.rules[98].opcodes[1] = {type: 3, min: 0, max: 1};// REP
  this.rules[98].opcodes[2] = {type: 2, children: [3,4,5,6]};// CAT
  this.rules[98].opcodes[3] = {type: 7, string: [91]};// TLS
  this.rules[98].opcodes[4] = {type: 4, index: 99};// RNM(cardinality)
  this.rules[98].opcodes[5] = {type: 7, string: [93]};// TLS
  this.rules[98].opcodes[6] = {type: 4, index: 21};// RNM(ws)
  this.rules[98].opcodes[7] = {type: 3, min: 0, max: 1};// REP
  this.rules[98].opcodes[8] = {type: 2, children: [9,10]};// CAT
  this.rules[98].opcodes[9] = {type: 4, index: 104};// RNM(reverseFlag)
  this.rules[98].opcodes[10] = {type: 4, index: 21};// RNM(ws)
  this.rules[98].opcodes[11] = {type: 4, index: 105};// RNM(eclAttributeName)
  this.rules[98].opcodes[12] = {type: 4, index: 21};// RNM(ws)
  this.rules[98].opcodes[13] = {type: 1, children: [14,18,23]};// ALT
  this.rules[98].opcodes[14] = {type: 2, children: [15,16,17]};// CAT
  this.rules[98].opcodes[15] = {type: 4, index: 106};// RNM(expressionComparisonOperator)
  this.rules[98].opcodes[16] = {type: 4, index: 21};// RNM(ws)
  this.rules[98].opcodes[17] = {type: 4, index: 73};// RNM(subExpressionConstraint)
  this.rules[98].opcodes[18] = {type: 2, children: [19,20,21,22]};// CAT
  this.rules[98].opcodes[19] = {type: 4, index: 107};// RNM(numericComparisonOperator)
  this.rules[98].opcodes[20] = {type: 4, index: 21};// RNM(ws)
  this.rules[98].opcodes[21] = {type: 7, string: [35]};// TLS
  this.rules[98].opcodes[22] = {type: 4, index: 17};// RNM(numericValue)
  this.rules[98].opcodes[23] = {type: 2, children: [24,25,26,27,28]};// CAT
  this.rules[98].opcodes[24] = {type: 4, index: 108};// RNM(stringComparisonOperator)
  this.rules[98].opcodes[25] = {type: 4, index: 21};// RNM(ws)
  this.rules[98].opcodes[26] = {type: 4, index: 26};// RNM(QM)
  this.rules[98].opcodes[27] = {type: 4, index: 16};// RNM(stringValue)
  this.rules[98].opcodes[28] = {type: 4, index: 26};// RNM(QM)

  /* cardinality */
  this.rules[99].opcodes = [];
  this.rules[99].opcodes[0] = {type: 2, children: [1,2,3]};// CAT
  this.rules[99].opcodes[1] = {type: 4, index: 100};// RNM(minValue)
  this.rules[99].opcodes[2] = {type: 4, index: 101};// RNM(to)
  this.rules[99].opcodes[3] = {type: 4, index: 102};// RNM(maxValue)

  /* minValue */
  this.rules[100].opcodes = [];
  this.rules[100].opcodes[0] = {type: 4, index: 109};// RNM(nonNegativeIntegerValue)

  /* to */
  this.rules[101].opcodes = [];
  this.rules[101].opcodes[0] = {type: 7, string: [46,46]};// TLS

  /* maxValue */
  this.rules[102].opcodes = [];
  this.rules[102].opcodes[0] = {type: 1, children: [1,2]};// ALT
  this.rules[102].opcodes[1] = {type: 4, index: 109};// RNM(nonNegativeIntegerValue)
  this.rules[102].opcodes[2] = {type: 4, index: 103};// RNM(many)

  /* many */
  this.rules[103].opcodes = [];
  this.rules[103].opcodes[0] = {type: 7, string: [42]};// TLS

  /* reverseFlag */
  this.rules[104].opcodes = [];
  this.rules[104].opcodes[0] = {type: 7, string: [114]};// TLS

  /* eclAttributeName */
  this.rules[105].opcodes = [];
  this.rules[105].opcodes[0] = {type: 4, index: 73};// RNM(subExpressionConstraint)

  /* expressionComparisonOperator */
  this.rules[106].opcodes = [];
  this.rules[106].opcodes[0] = {type: 1, children: [1,2]};// ALT
  this.rules[106].opcodes[1] = {type: 7, string: [61]};// TLS
  this.rules[106].opcodes[2] = {type: 7, string: [33,61]};// TLS

  /* numericComparisonOperator */
  this.rules[107].opcodes = [];
  this.rules[107].opcodes[0] = {type: 1, children: [1,2,3,4,5,6]};// ALT
  this.rules[107].opcodes[1] = {type: 7, string: [61]};// TLS
  this.rules[107].opcodes[2] = {type: 7, string: [33,61]};// TLS
  this.rules[107].opcodes[3] = {type: 7, string: [60,61]};// TLS
  this.rules[107].opcodes[4] = {type: 7, string: [60]};// TLS
  this.rules[107].opcodes[5] = {type: 7, string: [62,61]};// TLS
  this.rules[107].opcodes[6] = {type: 7, string: [62]};// TLS

  /* stringComparisonOperator */
  this.rules[108].opcodes = [];
  this.rules[108].opcodes[0] = {type: 1, children: [1,2]};// ALT
  this.rules[108].opcodes[1] = {type: 7, string: [61]};// TLS
  this.rules[108].opcodes[2] = {type: 7, string: [33,61]};// TLS

  /* nonNegativeIntegerValue */
  this.rules[109].opcodes = [];
  this.rules[109].opcodes[0] = {type: 1, children: [1,5]};// ALT
  this.rules[109].opcodes[1] = {type: 2, children: [2,3]};// CAT
  this.rules[109].opcodes[2] = {type: 4, index: 30};// RNM(digitNonZero)
  this.rules[109].opcodes[3] = {type: 3, min: 0, max: Infinity};// REP
  this.rules[109].opcodes[4] = {type: 4, index: 28};// RNM(digit)
  this.rules[109].opcodes[5] = {type: 4, index: 29};// RNM(zero)

  /* mws */
  this.rules[110].opcodes = [];
  this.rules[110].opcodes[0] = {type: 3, min: 1, max: Infinity};// REP
  this.rules[110].opcodes[1] = {type: 1, children: [2,3,4,5,6]};// ALT
  this.rules[110].opcodes[2] = {type: 4, index: 22};// RNM(SP)
  this.rules[110].opcodes[3] = {type: 4, index: 23};// RNM(HTAB)
  this.rules[110].opcodes[4] = {type: 4, index: 24};// RNM(CR)
  this.rules[110].opcodes[5] = {type: 4, index: 25};// RNM(LF)
  this.rules[110].opcodes[6] = {type: 4, index: 111};// RNM(comment)

  /* comment */
  this.rules[111].opcodes = [];
  this.rules[111].opcodes[0] = {type: 2, children: [1,2,6]};// CAT
  this.rules[111].opcodes[1] = {type: 7, string: [47,42]};// TLS
  this.rules[111].opcodes[2] = {type: 3, min: 0, max: Infinity};// REP
  this.rules[111].opcodes[3] = {type: 1, children: [4,5]};// ALT
  this.rules[111].opcodes[4] = {type: 4, index: 112};// RNM(nonStarChar)
  this.rules[111].opcodes[5] = {type: 4, index: 113};// RNM(starWithNonFSlash)
  this.rules[111].opcodes[6] = {type: 7, string: [42,47]};// TLS

  /* nonStarChar */
  this.rules[112].opcodes = [];
  this.rules[112].opcodes[0] = {type: 1, children: [1,2,3,4,5,6,7,8,9]};// ALT
  this.rules[112].opcodes[1] = {type: 4, index: 22};// RNM(SP)
  this.rules[112].opcodes[2] = {type: 4, index: 23};// RNM(HTAB)
  this.rules[112].opcodes[3] = {type: 4, index: 24};// RNM(CR)
  this.rules[112].opcodes[4] = {type: 4, index: 25};// RNM(LF)
  this.rules[112].opcodes[5] = {type: 5, min: 33, max: 41};// TRG
  this.rules[112].opcodes[6] = {type: 5, min: 43, max: 126};// TRG
  this.rules[112].opcodes[7] = {type: 4, index: 34};// RNM(UTF8-2)
  this.rules[112].opcodes[8] = {type: 4, index: 35};// RNM(UTF8-3)
  this.rules[112].opcodes[9] = {type: 4, index: 36};// RNM(UTF8-4)

  /* starWithNonFSlash */
  this.rules[113].opcodes = [];
  this.rules[113].opcodes[0] = {type: 2, children: [1,2]};// CAT
  this.rules[113].opcodes[1] = {type: 6, string: [42]};// TBS
  this.rules[113].opcodes[2] = {type: 4, index: 114};// RNM(nonFSlash)

  /* nonFSlash */
  this.rules[114].opcodes = [];
  this.rules[114].opcodes[0] = {type: 1, children: [1,2,3,4,5,6,7,8,9]};// ALT
  this.rules[114].opcodes[1] = {type: 4, index: 22};// RNM(SP)
  this.rules[114].opcodes[2] = {type: 4, index: 23};// RNM(HTAB)
  this.rules[114].opcodes[3] = {type: 4, index: 24};// RNM(CR)
  this.rules[114].opcodes[4] = {type: 4, index: 25};// RNM(LF)
  this.rules[114].opcodes[5] = {type: 5, min: 33, max: 46};// TRG
  this.rules[114].opcodes[6] = {type: 5, min: 48, max: 126};// TRG
  this.rules[114].opcodes[7] = {type: 4, index: 34};// RNM(UTF8-2)
  this.rules[114].opcodes[8] = {type: 4, index: 35};// RNM(UTF8-3)
  this.rules[114].opcodes[9] = {type: 4, index: 36};// RNM(UTF8-4)

  // The `toString()` function will display the original grammar file(s) that produced these opcodes.
  this.toString = function(){
    var str = "";
    str += "; Compositional Grammar v2.3.1 with template hooks\n";
    str += "expressionTemplate =  ws [ (definitionStatus / tokenReplacementSlot) ws] subExpression ws\n";
    str += "subExpression = focusConcept [ws \":\" ws refinement]\n";
    str += "definitionStatus = equivalentTo / subtypeOf\n";
    str += "equivalentTo = \"===\" \n";
    str += "subtypeOf = \"<<<\"\n";
    str += "focusConcept = [templateInformationSlot ws] conceptReference *(ws \"+\" ws [templateInformationSlot ws] conceptReference) \n";
    str += "conceptReference = conceptReplacementSlot / expressionReplacementSlot / ( conceptId [ws \"|\" ws  term ws \"|\"] )\n";
    str += "conceptId = sctId\n";
    str += "term = nonwsNonPipe *( *SP nonwsNonPipe )\n";
    str += "refinement = (attributeSet / attributeGroup) *( ws [\",\" ws] attributeGroup )\n";
    str += "attributeGroup =   [ templateInformationSlot ws ] \"{\" ws attributeSet ws \"}\"\n";
    str += "attributeSet = attribute *(ws \",\" ws attribute)\n";
    str += "attribute = [ templateInformationSlot ws ] attributeName ws \"=\" ws attributeValue\n";
    str += "attributeName = conceptReference\n";
    str += "attributeValue = expressionValue / QM stringValue QM / \"#\" numericValue / concreteValueReplacementSlot\n";
    str += "expressionValue = conceptReference / \"(\" ws subExpression ws \")\"\n";
    str += "stringValue = 1*(anyNonEscapedChar / escapedChar)\n";
    str += "numericValue = [\"-\"/\"+\"] (decimalValue / integerValue)\n";
    str += "integerValue =  digitNonZero *digit / zero\n";
    str += "decimalValue = integerValue \".\" 1*digit\n";
    str += "sctId = digitNonZero 5*17( digit )\n";
    str += "ws = *( SP / HTAB / CR / LF ) ; optional white space\n";
    str += "SP = %x20 ; space\n";
    str += "HTAB = %x09 ; tab\n";
    str += "CR = %x0D ; carriage return\n";
    str += "LF = %x0A ; line feed\n";
    str += "QM = %x22 ; quotation mark\n";
    str += "BS = %x5C ; back slash\n";
    str += "digit = %x30-39\n";
    str += "zero = %x30\n";
    str += "digitNonZero = %x31-39\n";
    str += "nonwsNonPipe = %x21-7B / %x7D-7E / UTF8-2 / UTF8-3 / UTF8-4\n";
    str += "anyNonEscapedChar = HTAB / CR / LF / %x20-21 / %x23-5B / %x5D-7E / UTF8-2 / UTF8-3 / UTF8-4\n";
    str += "escapedChar = BS QM / BS BS\n";
    str += "UTF8-2 = %xC2-DF UTF8-tail\n";
    str += "UTF8-3 = %xE0 %xA0-BF UTF8-tail / %xE1-EC 2( UTF8-tail ) / %xED %x80-9F UTF8-tail / %xEE-EF 2( UTF8-tail )\n";
    str += "UTF8-4 = %xF0 %x90-BF 2( UTF8-tail ) / %xF1-F3 3( UTF8-tail ) / %xF4 %x80-8F 2( UTF8-tail )\n";
    str += "UTF8-tail = %x80-BF\n";
    str += "; Template Syntax v1\n";
    str += "templateSlot =  templateReplacementSlot / templateInformationSlot\n";
    str += "templateReplacementSlot = conceptReplacementSlot / expressionReplacementSlot / tokenReplacementSlot / concreteValueReplacementSlot\n";
    str += "conceptReplacementSlot = \"[[\" ws \"+\" ws \"id\" ws [ \"(\" ws expressionConstraint ws \")\" ws] [slotName ws] \"]]\"\n";
    str += "expressionReplacementSlot = \"[[\" ws \"+\" ws [\"scg\" ws] [ \"(\" ws expressionConstraint ws \")\" ws] [slotName ws] \"]]\"\n";
    str += "tokenReplacementSlot = \"[[\" ws \"+\" ws \"tok\" ws [ \"(\" ws slotTokenSet ws \")\" ws] [slotName ws] \"]]\"\n";
    str += "concreteValueReplacementSlot = stringReplacementSlot / integerReplacementSlot / decimalReplacementSlot\n";
    str += "stringReplacementSlot = \"[[\" ws \"+\" ws \"str\" ws [ \"(\" ws slotStringSet ws \")\" ws] [slotName ws] \"]]\"\n";
    str += "integerReplacementSlot = \"[[\" ws \"+\" ws \"int\" ws [ \"(\" ws slotIntegerSet ws \")\" ws] [slotName ws] \"]]\"\n";
    str += "decimalReplacementSlot = \"[[\" ws \"+\" ws \"dec\" ws [ \"(\" ws slotDecimalSet ws \")\" ws] [slotName ws] \"]]\" \n";
    str += "slotTokenSet = slotToken *(mws slotToken)\n";
    str += "slotStringSet = slotString *(mws slotString)\n";
    str += "slotIntegerSet = ( \"#\" integerValue / slotIntegerRange) *(mws (\"#\" integerValue / slotIntegerRange))\n";
    str += "slotDecimalSet = ( \"#\" decimalValue / slotDecimalRange) *(mws (\"#\" decimalValue / slotDecimalRange))\n";
    str += "slotIntegerRange = ( slotIntegerMinimum to [ slotIntegerMaximum ] ) / ( to slotIntegerMaximum )\n";
    str += "slotIntegerMinimum = [ exclusiveMinimum ] \"#\" integerValue\n";
    str += "slotIntegerMaximum = [ exclusiveMaximum ] \"#\" integerValue\n";
    str += "slotDecimalRange = ( slotDecimalMinimum to [ slotDecimalMaximum ] ) / ( to slotDecimalMaximum )\n";
    str += "slotDecimalMinimum = [ exclusiveMinimum ] \"#\" DecimalValue\n";
    str += "slotDecimalMaximum = [ exclusiveMaximum ] \"#\" DecimalValue\n";
    str += "exclusiveMinimum = \">\"\n";
    str += "exclusiveMaximum = \"<\"\n";
    str += "slotName = \"@\" (nonQuoteStringValue / slotString)\n";
    str += "slotToken = definitionStatus / memberOf / constraintOperator / conjunction / disjunction / exclusion / reverseFlag / expressionComparisonOperator / numericComparisonOperator / stringComparisonOperator\n";
    str += "slotString = QM stringValue QM\n";
    str += "nonQuoteStringValue = *(%x21 / %x23-26 / %x28-3F / %x41-5A / %x5C / %x5E-7E)   ; string with no ws, quotes, at or square brackets\n";
    str += "templateInformationSlot = \"[[\" ws slotInformation ws \"]]\"\n";
    str += "slotInformation = [cardinality ws] [slotName ws]\n";
    str += "; Expression Constraint Language v1.3 - Note that some rules are commented out because they are repeated in the Compositional Grammar rules above.\n";
    str += "expressionConstraint = ws ( refinedExpressionConstraint / compoundExpressionConstraint / dottedExpressionConstraint / subExpressionConstraint ) ws\n";
    str += "refinedExpressionConstraint = subExpressionConstraint ws \":\" ws eclRefinement\n";
    str += "compoundExpressionConstraint = conjunctionExpressionConstraint / disjunctionExpressionConstraint / exclusionExpressionConstraint\n";
    str += "conjunctionExpressionConstraint = subExpressionConstraint 1*(ws conjunction ws subExpressionConstraint)\n";
    str += "disjunctionExpressionConstraint = subExpressionConstraint 1*(ws disjunction ws subExpressionConstraint)\n";
    str += "exclusionExpressionConstraint = subExpressionConstraint ws exclusion ws subExpressionConstraint\n";
    str += "dottedExpressionConstraint = subExpressionConstraint 1*(ws dottedExpressionAttribute)\n";
    str += "dottedExpressionAttribute = dot ws eclAttributeName\n";
    str += "subExpressionConstraint = [constraintOperator ws] [memberOf ws] (eclFocusConcept / \"(\" ws expressionConstraint ws \")\")\n";
    str += "eclFocusConcept = eclConceptReference / wildCard\n";
    str += "dot = \".\"\n";
    str += "memberOf = \"^\"\n";
    str += "eclConceptReference = conceptId [ws \"|\" ws term ws \"|\"]\n";
    str += "; conceptId = sctId\n";
    str += "; term = 1*nonwsNonPipe *( 1*SP 1*nonwsNonPipe )\n";
    str += "wildCard = \"*\"\n";
    str += "constraintOperator = childOf / descendantOrSelfOf / descendantOf / parentOf / ancestorOrSelfOf / ancestorOf\n";
    str += "descendantOf = \"<\"\n";
    str += "descendantOrSelfOf = \"<<\"\n";
    str += "childOf = \"<!\"\n";
    str += "ancestorOf = \">\"\n";
    str += "ancestorOrSelfOf = \">>\"\n";
    str += "parentOf = \">!\"\n";
    str += "conjunction = ((\"a\"/\"A\") (\"n\"/\"N\") (\"d\"/\"D\") mws) / \",\"\n";
    str += "disjunction = (\"o\"/\"O\") (\"r\"/\"R\") mws\n";
    str += "exclusion = (\"m\"/\"M\") (\"i\"/\"I\") (\"n\"/\"N\") (\"u\"/\"U\") (\"s\"/\"S\") mws\n";
    str += "eclRefinement = subRefinement ws [conjunctionRefinementSet / disjunctionRefinementSet]\n";
    str += "conjunctionRefinementSet = 1*(ws conjunction ws subRefinement)\n";
    str += "disjunctionRefinementSet = 1*(ws disjunction ws subRefinement)\n";
    str += "subRefinement = eclAttributeSet / eclAttributeGroup / \"(\" ws eclRefinement ws \")\"\n";
    str += "eclAttributeSet = subAttributeSet ws [conjunctionAttributeSet / disjunctionAttributeSet]\n";
    str += "conjunctionAttributeSet = 1*(ws conjunction ws subAttributeSet)\n";
    str += "disjunctionAttributeSet = 1*(ws disjunction ws subAttributeSet)\n";
    str += "subAttributeSet = eclAttribute / \"(\" ws eclAttributeSet ws \")\"\n";
    str += "eclAttributeGroup = [\"[\" cardinality \"]\" ws] \"{\" ws eclAttributeSet ws \"}\"\n";
    str += "eclAttribute = [\"[\" cardinality \"]\" ws] [reverseFlag ws] eclAttributeName ws (expressionComparisonOperator ws subExpressionConstraint / numericComparisonOperator ws \"#\" numericValue / stringComparisonOperator ws QM stringValue QM)\n";
    str += "cardinality = minValue to maxValue\n";
    str += "minValue = nonNegativeIntegerValue\n";
    str += "to = \"..\"\n";
    str += "maxValue = nonNegativeIntegerValue / many\n";
    str += "many = \"*\"\n";
    str += "reverseFlag = \"R\"\n";
    str += "eclAttributeName = subExpressionConstraint\n";
    str += "expressionComparisonOperator = \"=\" / \"!=\"\n";
    str += "numericComparisonOperator = \"=\" / \"!=\" / \"<=\" / \"<\" / \">=\" / \">\"\n";
    str += "stringComparisonOperator = \"=\" / \"!=\"\n";
    str += "; numericValue = [\"-\"/\"+\"] (decimalValue / integerValue)\n";
    str += "; stringValue = 1*(anyNonEscapedChar / escapedChar)\n";
    str += "; integerValue =  digitNonZero *digit / zero\n";
    str += "; decimalValue = integerValue \".\" 1*digit\n";
    str += "nonNegativeIntegerValue = (digitNonZero *digit ) / zero\n";
    str += "; sctId = digitNonZero 5*17( digit )\n";
    str += "; ws = *( SP / HTAB / CR / LF / comment ) ; optional white space\n";
    str += "mws = 1*( SP / HTAB / CR / LF / comment ) ; mandatory white space\n";
    str += "comment = \"/*\" *(nonStarChar / starWithNonFSlash) \"*/\"\n";
    str += "nonStarChar = SP / HTAB / CR / LF / %x21-29 / %x2B-7E /UTF8-2 / UTF8-3 / UTF8-4\n";
    str += "starWithNonFSlash = %x2A nonFSlash\n";
    str += "nonFSlash = SP / HTAB / CR / LF / %x21-2E / %x30-7E /UTF8-2 / UTF8-3 / UTF8-4\n";
    str += "; SP = %x20 ; space\n";
    str += "; HTAB = %x09 ; tab\n";
    str += "; CR = %x0D ; carriage return\n";
    str += "; LF = %x0A ; line feed\n";
    str += "; QM = %x22 ; quotation mark\n";
    str += "; BS = %x5C ; back slash\n";
    str += "; digit = %x30-39\n";
    str += "; zero = %x30\n";
    str += "; digitNonZero = %x31-39\n";
    str += "; nonwsNonPipe = %x21-7B / %x7D-7E / UTF8-2 / UTF8-3 / UTF8-4\n";
    str += "; anyNonEscapedChar = SP / HTAB / CR / LF / %x20-21 / %x23-5B / %x5D-7E / UTF8-2 / UTF8-3 / UTF8-4\n";
    str += "; escapedChar = BS QM / BS BS\n";
    str += "; UTF8-2 = %xC2-DF UTF8-tail\n";
    str += "; UTF8-3 = %xE0 %xA0-BF UTF8-tail / %xE1-EC 2( UTF8-tail ) / %xED %x80-9F UTF8-tail / %xEE-EF 2( UTF8-tail )\n";
    str += "; UTF8-4 = %xF0 %x90-BF 2( UTF8-tail ) / %xF1-F3 3( UTF8-tail ) / %xF4 %x80-8F 2( UTF8-tail )\n";
    str += "; UTF8-tail = %x80-BF\n";
    return str;
  }
}
