// Generated by JavaScript APG, Version [`apg-js2`](https://github.com/ldthomas/apg-js2)
var generatedGrammar = function(){
"use strict";
  //```
  // SUMMARY
  //      rules = 74
  //       udts = 0
  //    opcodes = 771
  //        ---   ABNF original opcodes
  //        ALT = 157
  //        CAT = 69
  //        REP = 33
  //        RNM = 198
  //        TLS = 282
  //        TBS = 12
  //        TRG = 20
  //        ---   SABNF superset opcodes
  //        UDT = 0
  //        AND = 0
  //        NOT = 0
  //        BKA = 0
  //        BKN = 0
  //        BKR = 0
  //        ABG = 0
  //        AEN = 0
  // characters = [9 - 244]
  //```
  /* OBJECT IDENTIFIER (for internal parser use) */
  this.grammarObject = 'grammarObject';

  /* RULES */
  this.rules = [];
  this.rules[0] = {name: 'expressionConstraint', lower: 'expressionconstraint', index: 0, isBkr: false};
  this.rules[1] = {name: 'refinedExpressionConstraint', lower: 'refinedexpressionconstraint', index: 1, isBkr: false};
  this.rules[2] = {name: 'compoundExpressionConstraint', lower: 'compoundexpressionconstraint', index: 2, isBkr: false};
  this.rules[3] = {name: 'conjunctionExpressionConstraint', lower: 'conjunctionexpressionconstraint', index: 3, isBkr: false};
  this.rules[4] = {name: 'disjunctionExpressionConstraint', lower: 'disjunctionexpressionconstraint', index: 4, isBkr: false};
  this.rules[5] = {name: 'exclusionExpressionConstraint', lower: 'exclusionexpressionconstraint', index: 5, isBkr: false};
  this.rules[6] = {name: 'dottedExpressionConstraint', lower: 'dottedexpressionconstraint', index: 6, isBkr: false};
  this.rules[7] = {name: 'dottedExpressionAttribute', lower: 'dottedexpressionattribute', index: 7, isBkr: false};
  this.rules[8] = {name: 'subExpressionConstraint', lower: 'subexpressionconstraint', index: 8, isBkr: false};
  this.rules[9] = {name: 'eclFocusConcept', lower: 'eclfocusconcept', index: 9, isBkr: false};
  this.rules[10] = {name: 'dot', lower: 'dot', index: 10, isBkr: false};
  this.rules[11] = {name: 'memberOf', lower: 'memberof', index: 11, isBkr: false};
  this.rules[12] = {name: 'eclConceptReference', lower: 'eclconceptreference', index: 12, isBkr: false};
  this.rules[13] = {name: 'conceptId', lower: 'conceptid', index: 13, isBkr: false};
  this.rules[14] = {name: 'term', lower: 'term', index: 14, isBkr: false};
  this.rules[15] = {name: 'wildCard', lower: 'wildcard', index: 15, isBkr: false};
  this.rules[16] = {name: 'constraintOperator', lower: 'constraintoperator', index: 16, isBkr: false};
  this.rules[17] = {name: 'descendantOf', lower: 'descendantof', index: 17, isBkr: false};
  this.rules[18] = {name: 'descendantOrSelfOf', lower: 'descendantorselfof', index: 18, isBkr: false};
  this.rules[19] = {name: 'childOf', lower: 'childof', index: 19, isBkr: false};
  this.rules[20] = {name: 'ancestorOf', lower: 'ancestorof', index: 20, isBkr: false};
  this.rules[21] = {name: 'ancestorOrSelfOf', lower: 'ancestororselfof', index: 21, isBkr: false};
  this.rules[22] = {name: 'parentOf', lower: 'parentof', index: 22, isBkr: false};
  this.rules[23] = {name: 'conjunction', lower: 'conjunction', index: 23, isBkr: false};
  this.rules[24] = {name: 'disjunction', lower: 'disjunction', index: 24, isBkr: false};
  this.rules[25] = {name: 'exclusion', lower: 'exclusion', index: 25, isBkr: false};
  this.rules[26] = {name: 'eclRefinement', lower: 'eclrefinement', index: 26, isBkr: false};
  this.rules[27] = {name: 'conjunctionRefinementSet', lower: 'conjunctionrefinementset', index: 27, isBkr: false};
  this.rules[28] = {name: 'disjunctionRefinementSet', lower: 'disjunctionrefinementset', index: 28, isBkr: false};
  this.rules[29] = {name: 'subRefinement', lower: 'subrefinement', index: 29, isBkr: false};
  this.rules[30] = {name: 'eclAttributeSet', lower: 'eclattributeset', index: 30, isBkr: false};
  this.rules[31] = {name: 'conjunctionAttributeSet', lower: 'conjunctionattributeset', index: 31, isBkr: false};
  this.rules[32] = {name: 'disjunctionAttributeSet', lower: 'disjunctionattributeset', index: 32, isBkr: false};
  this.rules[33] = {name: 'subAttributeSet', lower: 'subattributeset', index: 33, isBkr: false};
  this.rules[34] = {name: 'eclAttributeGroup', lower: 'eclattributegroup', index: 34, isBkr: false};
  this.rules[35] = {name: 'eclAttribute', lower: 'eclattribute', index: 35, isBkr: false};
  this.rules[36] = {name: 'cardinality', lower: 'cardinality', index: 36, isBkr: false};
  this.rules[37] = {name: 'minValue', lower: 'minvalue', index: 37, isBkr: false};
  this.rules[38] = {name: 'to', lower: 'to', index: 38, isBkr: false};
  this.rules[39] = {name: 'maxValue', lower: 'maxvalue', index: 39, isBkr: false};
  this.rules[40] = {name: 'many', lower: 'many', index: 40, isBkr: false};
  this.rules[41] = {name: 'reverseFlag', lower: 'reverseflag', index: 41, isBkr: false};
  this.rules[42] = {name: 'eclAttributeName', lower: 'eclattributename', index: 42, isBkr: false};
  this.rules[43] = {name: 'expressionComparisonOperator', lower: 'expressioncomparisonoperator', index: 43, isBkr: false};
  this.rules[44] = {name: 'numericComparisonOperator', lower: 'numericcomparisonoperator', index: 44, isBkr: false};
  this.rules[45] = {name: 'stringComparisonOperator', lower: 'stringcomparisonoperator', index: 45, isBkr: false};
  this.rules[46] = {name: 'numericValue', lower: 'numericvalue', index: 46, isBkr: false};
  this.rules[47] = {name: 'stringValue', lower: 'stringvalue', index: 47, isBkr: false};
  this.rules[48] = {name: 'integerValue', lower: 'integervalue', index: 48, isBkr: false};
  this.rules[49] = {name: 'decimalValue', lower: 'decimalvalue', index: 49, isBkr: false};
  this.rules[50] = {name: 'nonNegativeIntegerValue', lower: 'nonnegativeintegervalue', index: 50, isBkr: false};
  this.rules[51] = {name: 'sctId', lower: 'sctid', index: 51, isBkr: false};
  this.rules[52] = {name: 'ws', lower: 'ws', index: 52, isBkr: false};
  this.rules[53] = {name: 'mws', lower: 'mws', index: 53, isBkr: false};
  this.rules[54] = {name: 'comment', lower: 'comment', index: 54, isBkr: false};
  this.rules[55] = {name: 'nonStarChar', lower: 'nonstarchar', index: 55, isBkr: false};
  this.rules[56] = {name: 'starWithNonFSlash', lower: 'starwithnonfslash', index: 56, isBkr: false};
  this.rules[57] = {name: 'nonFSlash', lower: 'nonfslash', index: 57, isBkr: false};
  this.rules[58] = {name: 'SP', lower: 'sp', index: 58, isBkr: false};
  this.rules[59] = {name: 'HTAB', lower: 'htab', index: 59, isBkr: false};
  this.rules[60] = {name: 'CR', lower: 'cr', index: 60, isBkr: false};
  this.rules[61] = {name: 'LF', lower: 'lf', index: 61, isBkr: false};
  this.rules[62] = {name: 'QM', lower: 'qm', index: 62, isBkr: false};
  this.rules[63] = {name: 'BS', lower: 'bs', index: 63, isBkr: false};
  this.rules[64] = {name: 'digit', lower: 'digit', index: 64, isBkr: false};
  this.rules[65] = {name: 'zero', lower: 'zero', index: 65, isBkr: false};
  this.rules[66] = {name: 'digitNonZero', lower: 'digitnonzero', index: 66, isBkr: false};
  this.rules[67] = {name: 'nonwsNonPipe', lower: 'nonwsnonpipe', index: 67, isBkr: false};
  this.rules[68] = {name: 'anyNonEscapedChar', lower: 'anynonescapedchar', index: 68, isBkr: false};
  this.rules[69] = {name: 'escapedChar', lower: 'escapedchar', index: 69, isBkr: false};
  this.rules[70] = {name: 'UTF8-2', lower: 'utf8-2', index: 70, isBkr: false};
  this.rules[71] = {name: 'UTF8-3', lower: 'utf8-3', index: 71, isBkr: false};
  this.rules[72] = {name: 'UTF8-4', lower: 'utf8-4', index: 72, isBkr: false};
  this.rules[73] = {name: 'UTF8-tail', lower: 'utf8-tail', index: 73, isBkr: false};

  /* UDTS */
  this.udts = [];

  /* OPCODES */
  /* expressionConstraint */
  this.rules[0].opcodes = [];
  this.rules[0].opcodes[0] = {type: 2, children: [1,2,7]};// CAT
  this.rules[0].opcodes[1] = {type: 4, index: 52};// RNM(ws)
  this.rules[0].opcodes[2] = {type: 1, children: [3,4,5,6]};// ALT
  this.rules[0].opcodes[3] = {type: 4, index: 1};// RNM(refinedExpressionConstraint)
  this.rules[0].opcodes[4] = {type: 4, index: 2};// RNM(compoundExpressionConstraint)
  this.rules[0].opcodes[5] = {type: 4, index: 6};// RNM(dottedExpressionConstraint)
  this.rules[0].opcodes[6] = {type: 4, index: 8};// RNM(subExpressionConstraint)
  this.rules[0].opcodes[7] = {type: 4, index: 52};// RNM(ws)

  /* refinedExpressionConstraint */
  this.rules[1].opcodes = [];
  this.rules[1].opcodes[0] = {type: 2, children: [1,2,3,4,5]};// CAT
  this.rules[1].opcodes[1] = {type: 4, index: 8};// RNM(subExpressionConstraint)
  this.rules[1].opcodes[2] = {type: 4, index: 52};// RNM(ws)
  this.rules[1].opcodes[3] = {type: 7, string: [58]};// TLS
  this.rules[1].opcodes[4] = {type: 4, index: 52};// RNM(ws)
  this.rules[1].opcodes[5] = {type: 4, index: 26};// RNM(eclRefinement)

  /* compoundExpressionConstraint */
  this.rules[2].opcodes = [];
  this.rules[2].opcodes[0] = {type: 1, children: [1,2,3]};// ALT
  this.rules[2].opcodes[1] = {type: 4, index: 3};// RNM(conjunctionExpressionConstraint)
  this.rules[2].opcodes[2] = {type: 4, index: 4};// RNM(disjunctionExpressionConstraint)
  this.rules[2].opcodes[3] = {type: 4, index: 5};// RNM(exclusionExpressionConstraint)

  /* conjunctionExpressionConstraint */
  this.rules[3].opcodes = [];
  this.rules[3].opcodes[0] = {type: 2, children: [1,2]};// CAT
  this.rules[3].opcodes[1] = {type: 4, index: 8};// RNM(subExpressionConstraint)
  this.rules[3].opcodes[2] = {type: 3, min: 1, max: Infinity};// REP
  this.rules[3].opcodes[3] = {type: 2, children: [4,5,6,7]};// CAT
  this.rules[3].opcodes[4] = {type: 4, index: 52};// RNM(ws)
  this.rules[3].opcodes[5] = {type: 4, index: 23};// RNM(conjunction)
  this.rules[3].opcodes[6] = {type: 4, index: 52};// RNM(ws)
  this.rules[3].opcodes[7] = {type: 4, index: 8};// RNM(subExpressionConstraint)

  /* disjunctionExpressionConstraint */
  this.rules[4].opcodes = [];
  this.rules[4].opcodes[0] = {type: 2, children: [1,2]};// CAT
  this.rules[4].opcodes[1] = {type: 4, index: 8};// RNM(subExpressionConstraint)
  this.rules[4].opcodes[2] = {type: 3, min: 1, max: Infinity};// REP
  this.rules[4].opcodes[3] = {type: 2, children: [4,5,6,7]};// CAT
  this.rules[4].opcodes[4] = {type: 4, index: 52};// RNM(ws)
  this.rules[4].opcodes[5] = {type: 4, index: 24};// RNM(disjunction)
  this.rules[4].opcodes[6] = {type: 4, index: 52};// RNM(ws)
  this.rules[4].opcodes[7] = {type: 4, index: 8};// RNM(subExpressionConstraint)

  /* exclusionExpressionConstraint */
  this.rules[5].opcodes = [];
  this.rules[5].opcodes[0] = {type: 2, children: [1,2,3,4,5]};// CAT
  this.rules[5].opcodes[1] = {type: 4, index: 8};// RNM(subExpressionConstraint)
  this.rules[5].opcodes[2] = {type: 4, index: 52};// RNM(ws)
  this.rules[5].opcodes[3] = {type: 4, index: 25};// RNM(exclusion)
  this.rules[5].opcodes[4] = {type: 4, index: 52};// RNM(ws)
  this.rules[5].opcodes[5] = {type: 4, index: 8};// RNM(subExpressionConstraint)

  /* dottedExpressionConstraint */
  this.rules[6].opcodes = [];
  this.rules[6].opcodes[0] = {type: 2, children: [1,2]};// CAT
  this.rules[6].opcodes[1] = {type: 4, index: 8};// RNM(subExpressionConstraint)
  this.rules[6].opcodes[2] = {type: 3, min: 1, max: Infinity};// REP
  this.rules[6].opcodes[3] = {type: 2, children: [4,5]};// CAT
  this.rules[6].opcodes[4] = {type: 4, index: 52};// RNM(ws)
  this.rules[6].opcodes[5] = {type: 4, index: 7};// RNM(dottedExpressionAttribute)

  /* dottedExpressionAttribute */
  this.rules[7].opcodes = [];
  this.rules[7].opcodes[0] = {type: 2, children: [1,2,3]};// CAT
  this.rules[7].opcodes[1] = {type: 4, index: 10};// RNM(dot)
  this.rules[7].opcodes[2] = {type: 4, index: 52};// RNM(ws)
  this.rules[7].opcodes[3] = {type: 4, index: 42};// RNM(eclAttributeName)

  /* subExpressionConstraint */
  this.rules[8].opcodes = [];
  this.rules[8].opcodes[0] = {type: 2, children: [1,5,9]};// CAT
  this.rules[8].opcodes[1] = {type: 3, min: 0, max: 1};// REP
  this.rules[8].opcodes[2] = {type: 2, children: [3,4]};// CAT
  this.rules[8].opcodes[3] = {type: 4, index: 16};// RNM(constraintOperator)
  this.rules[8].opcodes[4] = {type: 4, index: 52};// RNM(ws)
  this.rules[8].opcodes[5] = {type: 3, min: 0, max: 1};// REP
  this.rules[8].opcodes[6] = {type: 2, children: [7,8]};// CAT
  this.rules[8].opcodes[7] = {type: 4, index: 11};// RNM(memberOf)
  this.rules[8].opcodes[8] = {type: 4, index: 52};// RNM(ws)
  this.rules[8].opcodes[9] = {type: 1, children: [10,11]};// ALT
  this.rules[8].opcodes[10] = {type: 4, index: 9};// RNM(eclFocusConcept)
  this.rules[8].opcodes[11] = {type: 2, children: [12,13,14,15,16]};// CAT
  this.rules[8].opcodes[12] = {type: 7, string: [40]};// TLS
  this.rules[8].opcodes[13] = {type: 4, index: 52};// RNM(ws)
  this.rules[8].opcodes[14] = {type: 4, index: 0};// RNM(expressionConstraint)
  this.rules[8].opcodes[15] = {type: 4, index: 52};// RNM(ws)
  this.rules[8].opcodes[16] = {type: 7, string: [41]};// TLS

  /* eclFocusConcept */
  this.rules[9].opcodes = [];
  this.rules[9].opcodes[0] = {type: 1, children: [1,2]};// ALT
  this.rules[9].opcodes[1] = {type: 4, index: 12};// RNM(eclConceptReference)
  this.rules[9].opcodes[2] = {type: 4, index: 15};// RNM(wildCard)

  /* dot */
  this.rules[10].opcodes = [];
  this.rules[10].opcodes[0] = {type: 7, string: [46]};// TLS

  /* memberOf */
  this.rules[11].opcodes = [];
  this.rules[11].opcodes[0] = {type: 1, children: [1,2]};// ALT
  this.rules[11].opcodes[1] = {type: 7, string: [94]};// TLS
  this.rules[11].opcodes[2] = {type: 2, children: [3,6,9,12,15,18,21,24]};// CAT
  this.rules[11].opcodes[3] = {type: 1, children: [4,5]};// ALT
  this.rules[11].opcodes[4] = {type: 7, string: [109]};// TLS
  this.rules[11].opcodes[5] = {type: 7, string: [109]};// TLS
  this.rules[11].opcodes[6] = {type: 1, children: [7,8]};// ALT
  this.rules[11].opcodes[7] = {type: 7, string: [101]};// TLS
  this.rules[11].opcodes[8] = {type: 7, string: [101]};// TLS
  this.rules[11].opcodes[9] = {type: 1, children: [10,11]};// ALT
  this.rules[11].opcodes[10] = {type: 7, string: [109]};// TLS
  this.rules[11].opcodes[11] = {type: 7, string: [109]};// TLS
  this.rules[11].opcodes[12] = {type: 1, children: [13,14]};// ALT
  this.rules[11].opcodes[13] = {type: 7, string: [98]};// TLS
  this.rules[11].opcodes[14] = {type: 7, string: [98]};// TLS
  this.rules[11].opcodes[15] = {type: 1, children: [16,17]};// ALT
  this.rules[11].opcodes[16] = {type: 7, string: [101]};// TLS
  this.rules[11].opcodes[17] = {type: 7, string: [101]};// TLS
  this.rules[11].opcodes[18] = {type: 1, children: [19,20]};// ALT
  this.rules[11].opcodes[19] = {type: 7, string: [114]};// TLS
  this.rules[11].opcodes[20] = {type: 7, string: [114]};// TLS
  this.rules[11].opcodes[21] = {type: 1, children: [22,23]};// ALT
  this.rules[11].opcodes[22] = {type: 7, string: [111]};// TLS
  this.rules[11].opcodes[23] = {type: 7, string: [111]};// TLS
  this.rules[11].opcodes[24] = {type: 1, children: [25,26]};// ALT
  this.rules[11].opcodes[25] = {type: 7, string: [102]};// TLS
  this.rules[11].opcodes[26] = {type: 7, string: [102]};// TLS

  /* eclConceptReference */
  this.rules[12].opcodes = [];
  this.rules[12].opcodes[0] = {type: 2, children: [1,2]};// CAT
  this.rules[12].opcodes[1] = {type: 4, index: 13};// RNM(conceptId)
  this.rules[12].opcodes[2] = {type: 3, min: 0, max: 1};// REP
  this.rules[12].opcodes[3] = {type: 2, children: [4,5,6,7,8,9]};// CAT
  this.rules[12].opcodes[4] = {type: 4, index: 52};// RNM(ws)
  this.rules[12].opcodes[5] = {type: 7, string: [124]};// TLS
  this.rules[12].opcodes[6] = {type: 4, index: 52};// RNM(ws)
  this.rules[12].opcodes[7] = {type: 4, index: 14};// RNM(term)
  this.rules[12].opcodes[8] = {type: 4, index: 52};// RNM(ws)
  this.rules[12].opcodes[9] = {type: 7, string: [124]};// TLS

  /* conceptId */
  this.rules[13].opcodes = [];
  this.rules[13].opcodes[0] = {type: 4, index: 51};// RNM(sctId)

  /* term */
  this.rules[14].opcodes = [];
  this.rules[14].opcodes[0] = {type: 2, children: [1,3]};// CAT
  this.rules[14].opcodes[1] = {type: 3, min: 1, max: Infinity};// REP
  this.rules[14].opcodes[2] = {type: 4, index: 67};// RNM(nonwsNonPipe)
  this.rules[14].opcodes[3] = {type: 3, min: 0, max: Infinity};// REP
  this.rules[14].opcodes[4] = {type: 2, children: [5,7]};// CAT
  this.rules[14].opcodes[5] = {type: 3, min: 1, max: Infinity};// REP
  this.rules[14].opcodes[6] = {type: 4, index: 58};// RNM(SP)
  this.rules[14].opcodes[7] = {type: 3, min: 1, max: Infinity};// REP
  this.rules[14].opcodes[8] = {type: 4, index: 67};// RNM(nonwsNonPipe)

  /* wildCard */
  this.rules[15].opcodes = [];
  this.rules[15].opcodes[0] = {type: 1, children: [1,2]};// ALT
  this.rules[15].opcodes[1] = {type: 7, string: [42]};// TLS
  this.rules[15].opcodes[2] = {type: 2, children: [3,6,9]};// CAT
  this.rules[15].opcodes[3] = {type: 1, children: [4,5]};// ALT
  this.rules[15].opcodes[4] = {type: 7, string: [97]};// TLS
  this.rules[15].opcodes[5] = {type: 7, string: [97]};// TLS
  this.rules[15].opcodes[6] = {type: 1, children: [7,8]};// ALT
  this.rules[15].opcodes[7] = {type: 7, string: [110]};// TLS
  this.rules[15].opcodes[8] = {type: 7, string: [110]};// TLS
  this.rules[15].opcodes[9] = {type: 1, children: [10,11]};// ALT
  this.rules[15].opcodes[10] = {type: 7, string: [121]};// TLS
  this.rules[15].opcodes[11] = {type: 7, string: [121]};// TLS

  /* constraintOperator */
  this.rules[16].opcodes = [];
  this.rules[16].opcodes[0] = {type: 1, children: [1,2,3,4,5,6]};// ALT
  this.rules[16].opcodes[1] = {type: 4, index: 19};// RNM(childOf)
  this.rules[16].opcodes[2] = {type: 4, index: 18};// RNM(descendantOrSelfOf)
  this.rules[16].opcodes[3] = {type: 4, index: 17};// RNM(descendantOf)
  this.rules[16].opcodes[4] = {type: 4, index: 22};// RNM(parentOf)
  this.rules[16].opcodes[5] = {type: 4, index: 21};// RNM(ancestorOrSelfOf)
  this.rules[16].opcodes[6] = {type: 4, index: 20};// RNM(ancestorOf)

  /* descendantOf */
  this.rules[17].opcodes = [];
  this.rules[17].opcodes[0] = {type: 1, children: [1,2]};// ALT
  this.rules[17].opcodes[1] = {type: 7, string: [60]};// TLS
  this.rules[17].opcodes[2] = {type: 2, children: [3,6,9,12,15,18,21,24,27,30,33,36,39]};// CAT
  this.rules[17].opcodes[3] = {type: 1, children: [4,5]};// ALT
  this.rules[17].opcodes[4] = {type: 7, string: [100]};// TLS
  this.rules[17].opcodes[5] = {type: 7, string: [100]};// TLS
  this.rules[17].opcodes[6] = {type: 1, children: [7,8]};// ALT
  this.rules[17].opcodes[7] = {type: 7, string: [101]};// TLS
  this.rules[17].opcodes[8] = {type: 7, string: [101]};// TLS
  this.rules[17].opcodes[9] = {type: 1, children: [10,11]};// ALT
  this.rules[17].opcodes[10] = {type: 7, string: [115]};// TLS
  this.rules[17].opcodes[11] = {type: 7, string: [115]};// TLS
  this.rules[17].opcodes[12] = {type: 1, children: [13,14]};// ALT
  this.rules[17].opcodes[13] = {type: 7, string: [99]};// TLS
  this.rules[17].opcodes[14] = {type: 7, string: [99]};// TLS
  this.rules[17].opcodes[15] = {type: 1, children: [16,17]};// ALT
  this.rules[17].opcodes[16] = {type: 7, string: [101]};// TLS
  this.rules[17].opcodes[17] = {type: 7, string: [101]};// TLS
  this.rules[17].opcodes[18] = {type: 1, children: [19,20]};// ALT
  this.rules[17].opcodes[19] = {type: 7, string: [110]};// TLS
  this.rules[17].opcodes[20] = {type: 7, string: [110]};// TLS
  this.rules[17].opcodes[21] = {type: 1, children: [22,23]};// ALT
  this.rules[17].opcodes[22] = {type: 7, string: [100]};// TLS
  this.rules[17].opcodes[23] = {type: 7, string: [100]};// TLS
  this.rules[17].opcodes[24] = {type: 1, children: [25,26]};// ALT
  this.rules[17].opcodes[25] = {type: 7, string: [97]};// TLS
  this.rules[17].opcodes[26] = {type: 7, string: [97]};// TLS
  this.rules[17].opcodes[27] = {type: 1, children: [28,29]};// ALT
  this.rules[17].opcodes[28] = {type: 7, string: [110]};// TLS
  this.rules[17].opcodes[29] = {type: 7, string: [110]};// TLS
  this.rules[17].opcodes[30] = {type: 1, children: [31,32]};// ALT
  this.rules[17].opcodes[31] = {type: 7, string: [116]};// TLS
  this.rules[17].opcodes[32] = {type: 7, string: [116]};// TLS
  this.rules[17].opcodes[33] = {type: 1, children: [34,35]};// ALT
  this.rules[17].opcodes[34] = {type: 7, string: [111]};// TLS
  this.rules[17].opcodes[35] = {type: 7, string: [111]};// TLS
  this.rules[17].opcodes[36] = {type: 1, children: [37,38]};// ALT
  this.rules[17].opcodes[37] = {type: 7, string: [102]};// TLS
  this.rules[17].opcodes[38] = {type: 7, string: [102]};// TLS
  this.rules[17].opcodes[39] = {type: 4, index: 53};// RNM(mws)

  /* descendantOrSelfOf */
  this.rules[18].opcodes = [];
  this.rules[18].opcodes[0] = {type: 1, children: [1,2]};// ALT
  this.rules[18].opcodes[1] = {type: 7, string: [60,60]};// TLS
  this.rules[18].opcodes[2] = {type: 2, children: [3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57]};// CAT
  this.rules[18].opcodes[3] = {type: 1, children: [4,5]};// ALT
  this.rules[18].opcodes[4] = {type: 7, string: [100]};// TLS
  this.rules[18].opcodes[5] = {type: 7, string: [100]};// TLS
  this.rules[18].opcodes[6] = {type: 1, children: [7,8]};// ALT
  this.rules[18].opcodes[7] = {type: 7, string: [101]};// TLS
  this.rules[18].opcodes[8] = {type: 7, string: [101]};// TLS
  this.rules[18].opcodes[9] = {type: 1, children: [10,11]};// ALT
  this.rules[18].opcodes[10] = {type: 7, string: [115]};// TLS
  this.rules[18].opcodes[11] = {type: 7, string: [115]};// TLS
  this.rules[18].opcodes[12] = {type: 1, children: [13,14]};// ALT
  this.rules[18].opcodes[13] = {type: 7, string: [99]};// TLS
  this.rules[18].opcodes[14] = {type: 7, string: [99]};// TLS
  this.rules[18].opcodes[15] = {type: 1, children: [16,17]};// ALT
  this.rules[18].opcodes[16] = {type: 7, string: [101]};// TLS
  this.rules[18].opcodes[17] = {type: 7, string: [101]};// TLS
  this.rules[18].opcodes[18] = {type: 1, children: [19,20]};// ALT
  this.rules[18].opcodes[19] = {type: 7, string: [110]};// TLS
  this.rules[18].opcodes[20] = {type: 7, string: [110]};// TLS
  this.rules[18].opcodes[21] = {type: 1, children: [22,23]};// ALT
  this.rules[18].opcodes[22] = {type: 7, string: [100]};// TLS
  this.rules[18].opcodes[23] = {type: 7, string: [100]};// TLS
  this.rules[18].opcodes[24] = {type: 1, children: [25,26]};// ALT
  this.rules[18].opcodes[25] = {type: 7, string: [97]};// TLS
  this.rules[18].opcodes[26] = {type: 7, string: [97]};// TLS
  this.rules[18].opcodes[27] = {type: 1, children: [28,29]};// ALT
  this.rules[18].opcodes[28] = {type: 7, string: [110]};// TLS
  this.rules[18].opcodes[29] = {type: 7, string: [110]};// TLS
  this.rules[18].opcodes[30] = {type: 1, children: [31,32]};// ALT
  this.rules[18].opcodes[31] = {type: 7, string: [116]};// TLS
  this.rules[18].opcodes[32] = {type: 7, string: [116]};// TLS
  this.rules[18].opcodes[33] = {type: 1, children: [34,35]};// ALT
  this.rules[18].opcodes[34] = {type: 7, string: [111]};// TLS
  this.rules[18].opcodes[35] = {type: 7, string: [111]};// TLS
  this.rules[18].opcodes[36] = {type: 1, children: [37,38]};// ALT
  this.rules[18].opcodes[37] = {type: 7, string: [114]};// TLS
  this.rules[18].opcodes[38] = {type: 7, string: [114]};// TLS
  this.rules[18].opcodes[39] = {type: 1, children: [40,41]};// ALT
  this.rules[18].opcodes[40] = {type: 7, string: [115]};// TLS
  this.rules[18].opcodes[41] = {type: 7, string: [115]};// TLS
  this.rules[18].opcodes[42] = {type: 1, children: [43,44]};// ALT
  this.rules[18].opcodes[43] = {type: 7, string: [101]};// TLS
  this.rules[18].opcodes[44] = {type: 7, string: [101]};// TLS
  this.rules[18].opcodes[45] = {type: 1, children: [46,47]};// ALT
  this.rules[18].opcodes[46] = {type: 7, string: [108]};// TLS
  this.rules[18].opcodes[47] = {type: 7, string: [108]};// TLS
  this.rules[18].opcodes[48] = {type: 1, children: [49,50]};// ALT
  this.rules[18].opcodes[49] = {type: 7, string: [102]};// TLS
  this.rules[18].opcodes[50] = {type: 7, string: [102]};// TLS
  this.rules[18].opcodes[51] = {type: 1, children: [52,53]};// ALT
  this.rules[18].opcodes[52] = {type: 7, string: [111]};// TLS
  this.rules[18].opcodes[53] = {type: 7, string: [111]};// TLS
  this.rules[18].opcodes[54] = {type: 1, children: [55,56]};// ALT
  this.rules[18].opcodes[55] = {type: 7, string: [102]};// TLS
  this.rules[18].opcodes[56] = {type: 7, string: [102]};// TLS
  this.rules[18].opcodes[57] = {type: 4, index: 53};// RNM(mws)

  /* childOf */
  this.rules[19].opcodes = [];
  this.rules[19].opcodes[0] = {type: 1, children: [1,2]};// ALT
  this.rules[19].opcodes[1] = {type: 7, string: [60,33]};// TLS
  this.rules[19].opcodes[2] = {type: 2, children: [3,6,9,12,15,18,21,24]};// CAT
  this.rules[19].opcodes[3] = {type: 1, children: [4,5]};// ALT
  this.rules[19].opcodes[4] = {type: 7, string: [99]};// TLS
  this.rules[19].opcodes[5] = {type: 7, string: [99]};// TLS
  this.rules[19].opcodes[6] = {type: 1, children: [7,8]};// ALT
  this.rules[19].opcodes[7] = {type: 7, string: [104]};// TLS
  this.rules[19].opcodes[8] = {type: 7, string: [104]};// TLS
  this.rules[19].opcodes[9] = {type: 1, children: [10,11]};// ALT
  this.rules[19].opcodes[10] = {type: 7, string: [105]};// TLS
  this.rules[19].opcodes[11] = {type: 7, string: [105]};// TLS
  this.rules[19].opcodes[12] = {type: 1, children: [13,14]};// ALT
  this.rules[19].opcodes[13] = {type: 7, string: [108]};// TLS
  this.rules[19].opcodes[14] = {type: 7, string: [108]};// TLS
  this.rules[19].opcodes[15] = {type: 1, children: [16,17]};// ALT
  this.rules[19].opcodes[16] = {type: 7, string: [100]};// TLS
  this.rules[19].opcodes[17] = {type: 7, string: [100]};// TLS
  this.rules[19].opcodes[18] = {type: 1, children: [19,20]};// ALT
  this.rules[19].opcodes[19] = {type: 7, string: [111]};// TLS
  this.rules[19].opcodes[20] = {type: 7, string: [111]};// TLS
  this.rules[19].opcodes[21] = {type: 1, children: [22,23]};// ALT
  this.rules[19].opcodes[22] = {type: 7, string: [102]};// TLS
  this.rules[19].opcodes[23] = {type: 7, string: [102]};// TLS
  this.rules[19].opcodes[24] = {type: 4, index: 53};// RNM(mws)

  /* ancestorOf */
  this.rules[20].opcodes = [];
  this.rules[20].opcodes[0] = {type: 1, children: [1,2]};// ALT
  this.rules[20].opcodes[1] = {type: 7, string: [62]};// TLS
  this.rules[20].opcodes[2] = {type: 2, children: [3,6,9,12,15,18,21,24,27,30,33]};// CAT
  this.rules[20].opcodes[3] = {type: 1, children: [4,5]};// ALT
  this.rules[20].opcodes[4] = {type: 7, string: [97]};// TLS
  this.rules[20].opcodes[5] = {type: 7, string: [97]};// TLS
  this.rules[20].opcodes[6] = {type: 1, children: [7,8]};// ALT
  this.rules[20].opcodes[7] = {type: 7, string: [110]};// TLS
  this.rules[20].opcodes[8] = {type: 7, string: [110]};// TLS
  this.rules[20].opcodes[9] = {type: 1, children: [10,11]};// ALT
  this.rules[20].opcodes[10] = {type: 7, string: [99]};// TLS
  this.rules[20].opcodes[11] = {type: 7, string: [99]};// TLS
  this.rules[20].opcodes[12] = {type: 1, children: [13,14]};// ALT
  this.rules[20].opcodes[13] = {type: 7, string: [101]};// TLS
  this.rules[20].opcodes[14] = {type: 7, string: [101]};// TLS
  this.rules[20].opcodes[15] = {type: 1, children: [16,17]};// ALT
  this.rules[20].opcodes[16] = {type: 7, string: [115]};// TLS
  this.rules[20].opcodes[17] = {type: 7, string: [115]};// TLS
  this.rules[20].opcodes[18] = {type: 1, children: [19,20]};// ALT
  this.rules[20].opcodes[19] = {type: 7, string: [116]};// TLS
  this.rules[20].opcodes[20] = {type: 7, string: [116]};// TLS
  this.rules[20].opcodes[21] = {type: 1, children: [22,23]};// ALT
  this.rules[20].opcodes[22] = {type: 7, string: [111]};// TLS
  this.rules[20].opcodes[23] = {type: 7, string: [111]};// TLS
  this.rules[20].opcodes[24] = {type: 1, children: [25,26]};// ALT
  this.rules[20].opcodes[25] = {type: 7, string: [114]};// TLS
  this.rules[20].opcodes[26] = {type: 7, string: [114]};// TLS
  this.rules[20].opcodes[27] = {type: 1, children: [28,29]};// ALT
  this.rules[20].opcodes[28] = {type: 7, string: [111]};// TLS
  this.rules[20].opcodes[29] = {type: 7, string: [111]};// TLS
  this.rules[20].opcodes[30] = {type: 1, children: [31,32]};// ALT
  this.rules[20].opcodes[31] = {type: 7, string: [102]};// TLS
  this.rules[20].opcodes[32] = {type: 7, string: [102]};// TLS
  this.rules[20].opcodes[33] = {type: 4, index: 53};// RNM(mws)

  /* ancestorOrSelfOf */
  this.rules[21].opcodes = [];
  this.rules[21].opcodes[0] = {type: 1, children: [1,2]};// ALT
  this.rules[21].opcodes[1] = {type: 7, string: [62,62]};// TLS
  this.rules[21].opcodes[2] = {type: 2, children: [3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51]};// CAT
  this.rules[21].opcodes[3] = {type: 1, children: [4,5]};// ALT
  this.rules[21].opcodes[4] = {type: 7, string: [97]};// TLS
  this.rules[21].opcodes[5] = {type: 7, string: [97]};// TLS
  this.rules[21].opcodes[6] = {type: 1, children: [7,8]};// ALT
  this.rules[21].opcodes[7] = {type: 7, string: [110]};// TLS
  this.rules[21].opcodes[8] = {type: 7, string: [110]};// TLS
  this.rules[21].opcodes[9] = {type: 1, children: [10,11]};// ALT
  this.rules[21].opcodes[10] = {type: 7, string: [99]};// TLS
  this.rules[21].opcodes[11] = {type: 7, string: [99]};// TLS
  this.rules[21].opcodes[12] = {type: 1, children: [13,14]};// ALT
  this.rules[21].opcodes[13] = {type: 7, string: [101]};// TLS
  this.rules[21].opcodes[14] = {type: 7, string: [101]};// TLS
  this.rules[21].opcodes[15] = {type: 1, children: [16,17]};// ALT
  this.rules[21].opcodes[16] = {type: 7, string: [115]};// TLS
  this.rules[21].opcodes[17] = {type: 7, string: [115]};// TLS
  this.rules[21].opcodes[18] = {type: 1, children: [19,20]};// ALT
  this.rules[21].opcodes[19] = {type: 7, string: [116]};// TLS
  this.rules[21].opcodes[20] = {type: 7, string: [116]};// TLS
  this.rules[21].opcodes[21] = {type: 1, children: [22,23]};// ALT
  this.rules[21].opcodes[22] = {type: 7, string: [111]};// TLS
  this.rules[21].opcodes[23] = {type: 7, string: [111]};// TLS
  this.rules[21].opcodes[24] = {type: 1, children: [25,26]};// ALT
  this.rules[21].opcodes[25] = {type: 7, string: [114]};// TLS
  this.rules[21].opcodes[26] = {type: 7, string: [114]};// TLS
  this.rules[21].opcodes[27] = {type: 1, children: [28,29]};// ALT
  this.rules[21].opcodes[28] = {type: 7, string: [111]};// TLS
  this.rules[21].opcodes[29] = {type: 7, string: [111]};// TLS
  this.rules[21].opcodes[30] = {type: 1, children: [31,32]};// ALT
  this.rules[21].opcodes[31] = {type: 7, string: [114]};// TLS
  this.rules[21].opcodes[32] = {type: 7, string: [114]};// TLS
  this.rules[21].opcodes[33] = {type: 1, children: [34,35]};// ALT
  this.rules[21].opcodes[34] = {type: 7, string: [115]};// TLS
  this.rules[21].opcodes[35] = {type: 7, string: [115]};// TLS
  this.rules[21].opcodes[36] = {type: 1, children: [37,38]};// ALT
  this.rules[21].opcodes[37] = {type: 7, string: [101]};// TLS
  this.rules[21].opcodes[38] = {type: 7, string: [101]};// TLS
  this.rules[21].opcodes[39] = {type: 1, children: [40,41]};// ALT
  this.rules[21].opcodes[40] = {type: 7, string: [108]};// TLS
  this.rules[21].opcodes[41] = {type: 7, string: [108]};// TLS
  this.rules[21].opcodes[42] = {type: 1, children: [43,44]};// ALT
  this.rules[21].opcodes[43] = {type: 7, string: [102]};// TLS
  this.rules[21].opcodes[44] = {type: 7, string: [102]};// TLS
  this.rules[21].opcodes[45] = {type: 1, children: [46,47]};// ALT
  this.rules[21].opcodes[46] = {type: 7, string: [111]};// TLS
  this.rules[21].opcodes[47] = {type: 7, string: [111]};// TLS
  this.rules[21].opcodes[48] = {type: 1, children: [49,50]};// ALT
  this.rules[21].opcodes[49] = {type: 7, string: [102]};// TLS
  this.rules[21].opcodes[50] = {type: 7, string: [102]};// TLS
  this.rules[21].opcodes[51] = {type: 4, index: 53};// RNM(mws)

  /* parentOf */
  this.rules[22].opcodes = [];
  this.rules[22].opcodes[0] = {type: 1, children: [1,2]};// ALT
  this.rules[22].opcodes[1] = {type: 7, string: [62,33]};// TLS
  this.rules[22].opcodes[2] = {type: 2, children: [3,6,9,12,15,18,21,24,27]};// CAT
  this.rules[22].opcodes[3] = {type: 1, children: [4,5]};// ALT
  this.rules[22].opcodes[4] = {type: 7, string: [112]};// TLS
  this.rules[22].opcodes[5] = {type: 7, string: [112]};// TLS
  this.rules[22].opcodes[6] = {type: 1, children: [7,8]};// ALT
  this.rules[22].opcodes[7] = {type: 7, string: [97]};// TLS
  this.rules[22].opcodes[8] = {type: 7, string: [97]};// TLS
  this.rules[22].opcodes[9] = {type: 1, children: [10,11]};// ALT
  this.rules[22].opcodes[10] = {type: 7, string: [114]};// TLS
  this.rules[22].opcodes[11] = {type: 7, string: [114]};// TLS
  this.rules[22].opcodes[12] = {type: 1, children: [13,14]};// ALT
  this.rules[22].opcodes[13] = {type: 7, string: [101]};// TLS
  this.rules[22].opcodes[14] = {type: 7, string: [101]};// TLS
  this.rules[22].opcodes[15] = {type: 1, children: [16,17]};// ALT
  this.rules[22].opcodes[16] = {type: 7, string: [110]};// TLS
  this.rules[22].opcodes[17] = {type: 7, string: [110]};// TLS
  this.rules[22].opcodes[18] = {type: 1, children: [19,20]};// ALT
  this.rules[22].opcodes[19] = {type: 7, string: [116]};// TLS
  this.rules[22].opcodes[20] = {type: 7, string: [116]};// TLS
  this.rules[22].opcodes[21] = {type: 1, children: [22,23]};// ALT
  this.rules[22].opcodes[22] = {type: 7, string: [111]};// TLS
  this.rules[22].opcodes[23] = {type: 7, string: [111]};// TLS
  this.rules[22].opcodes[24] = {type: 1, children: [25,26]};// ALT
  this.rules[22].opcodes[25] = {type: 7, string: [102]};// TLS
  this.rules[22].opcodes[26] = {type: 7, string: [102]};// TLS
  this.rules[22].opcodes[27] = {type: 4, index: 53};// RNM(mws)

  /* conjunction */
  this.rules[23].opcodes = [];
  this.rules[23].opcodes[0] = {type: 1, children: [1,12]};// ALT
  this.rules[23].opcodes[1] = {type: 2, children: [2,5,8,11]};// CAT
  this.rules[23].opcodes[2] = {type: 1, children: [3,4]};// ALT
  this.rules[23].opcodes[3] = {type: 7, string: [97]};// TLS
  this.rules[23].opcodes[4] = {type: 7, string: [97]};// TLS
  this.rules[23].opcodes[5] = {type: 1, children: [6,7]};// ALT
  this.rules[23].opcodes[6] = {type: 7, string: [110]};// TLS
  this.rules[23].opcodes[7] = {type: 7, string: [110]};// TLS
  this.rules[23].opcodes[8] = {type: 1, children: [9,10]};// ALT
  this.rules[23].opcodes[9] = {type: 7, string: [100]};// TLS
  this.rules[23].opcodes[10] = {type: 7, string: [100]};// TLS
  this.rules[23].opcodes[11] = {type: 4, index: 53};// RNM(mws)
  this.rules[23].opcodes[12] = {type: 7, string: [44]};// TLS

  /* disjunction */
  this.rules[24].opcodes = [];
  this.rules[24].opcodes[0] = {type: 2, children: [1,4,7]};// CAT
  this.rules[24].opcodes[1] = {type: 1, children: [2,3]};// ALT
  this.rules[24].opcodes[2] = {type: 7, string: [111]};// TLS
  this.rules[24].opcodes[3] = {type: 7, string: [111]};// TLS
  this.rules[24].opcodes[4] = {type: 1, children: [5,6]};// ALT
  this.rules[24].opcodes[5] = {type: 7, string: [114]};// TLS
  this.rules[24].opcodes[6] = {type: 7, string: [114]};// TLS
  this.rules[24].opcodes[7] = {type: 4, index: 53};// RNM(mws)

  /* exclusion */
  this.rules[25].opcodes = [];
  this.rules[25].opcodes[0] = {type: 2, children: [1,4,7,10,13,16]};// CAT
  this.rules[25].opcodes[1] = {type: 1, children: [2,3]};// ALT
  this.rules[25].opcodes[2] = {type: 7, string: [109]};// TLS
  this.rules[25].opcodes[3] = {type: 7, string: [109]};// TLS
  this.rules[25].opcodes[4] = {type: 1, children: [5,6]};// ALT
  this.rules[25].opcodes[5] = {type: 7, string: [105]};// TLS
  this.rules[25].opcodes[6] = {type: 7, string: [105]};// TLS
  this.rules[25].opcodes[7] = {type: 1, children: [8,9]};// ALT
  this.rules[25].opcodes[8] = {type: 7, string: [110]};// TLS
  this.rules[25].opcodes[9] = {type: 7, string: [110]};// TLS
  this.rules[25].opcodes[10] = {type: 1, children: [11,12]};// ALT
  this.rules[25].opcodes[11] = {type: 7, string: [117]};// TLS
  this.rules[25].opcodes[12] = {type: 7, string: [117]};// TLS
  this.rules[25].opcodes[13] = {type: 1, children: [14,15]};// ALT
  this.rules[25].opcodes[14] = {type: 7, string: [115]};// TLS
  this.rules[25].opcodes[15] = {type: 7, string: [115]};// TLS
  this.rules[25].opcodes[16] = {type: 4, index: 53};// RNM(mws)

  /* eclRefinement */
  this.rules[26].opcodes = [];
  this.rules[26].opcodes[0] = {type: 2, children: [1,2,3]};// CAT
  this.rules[26].opcodes[1] = {type: 4, index: 29};// RNM(subRefinement)
  this.rules[26].opcodes[2] = {type: 4, index: 52};// RNM(ws)
  this.rules[26].opcodes[3] = {type: 3, min: 0, max: 1};// REP
  this.rules[26].opcodes[4] = {type: 1, children: [5,6]};// ALT
  this.rules[26].opcodes[5] = {type: 4, index: 27};// RNM(conjunctionRefinementSet)
  this.rules[26].opcodes[6] = {type: 4, index: 28};// RNM(disjunctionRefinementSet)

  /* conjunctionRefinementSet */
  this.rules[27].opcodes = [];
  this.rules[27].opcodes[0] = {type: 3, min: 1, max: Infinity};// REP
  this.rules[27].opcodes[1] = {type: 2, children: [2,3,4,5]};// CAT
  this.rules[27].opcodes[2] = {type: 4, index: 52};// RNM(ws)
  this.rules[27].opcodes[3] = {type: 4, index: 23};// RNM(conjunction)
  this.rules[27].opcodes[4] = {type: 4, index: 52};// RNM(ws)
  this.rules[27].opcodes[5] = {type: 4, index: 29};// RNM(subRefinement)

  /* disjunctionRefinementSet */
  this.rules[28].opcodes = [];
  this.rules[28].opcodes[0] = {type: 3, min: 1, max: Infinity};// REP
  this.rules[28].opcodes[1] = {type: 2, children: [2,3,4,5]};// CAT
  this.rules[28].opcodes[2] = {type: 4, index: 52};// RNM(ws)
  this.rules[28].opcodes[3] = {type: 4, index: 24};// RNM(disjunction)
  this.rules[28].opcodes[4] = {type: 4, index: 52};// RNM(ws)
  this.rules[28].opcodes[5] = {type: 4, index: 29};// RNM(subRefinement)

  /* subRefinement */
  this.rules[29].opcodes = [];
  this.rules[29].opcodes[0] = {type: 1, children: [1,2,3]};// ALT
  this.rules[29].opcodes[1] = {type: 4, index: 30};// RNM(eclAttributeSet)
  this.rules[29].opcodes[2] = {type: 4, index: 34};// RNM(eclAttributeGroup)
  this.rules[29].opcodes[3] = {type: 2, children: [4,5,6,7,8]};// CAT
  this.rules[29].opcodes[4] = {type: 7, string: [40]};// TLS
  this.rules[29].opcodes[5] = {type: 4, index: 52};// RNM(ws)
  this.rules[29].opcodes[6] = {type: 4, index: 26};// RNM(eclRefinement)
  this.rules[29].opcodes[7] = {type: 4, index: 52};// RNM(ws)
  this.rules[29].opcodes[8] = {type: 7, string: [41]};// TLS

  /* eclAttributeSet */
  this.rules[30].opcodes = [];
  this.rules[30].opcodes[0] = {type: 2, children: [1,2,3]};// CAT
  this.rules[30].opcodes[1] = {type: 4, index: 33};// RNM(subAttributeSet)
  this.rules[30].opcodes[2] = {type: 4, index: 52};// RNM(ws)
  this.rules[30].opcodes[3] = {type: 3, min: 0, max: 1};// REP
  this.rules[30].opcodes[4] = {type: 1, children: [5,6]};// ALT
  this.rules[30].opcodes[5] = {type: 4, index: 31};// RNM(conjunctionAttributeSet)
  this.rules[30].opcodes[6] = {type: 4, index: 32};// RNM(disjunctionAttributeSet)

  /* conjunctionAttributeSet */
  this.rules[31].opcodes = [];
  this.rules[31].opcodes[0] = {type: 3, min: 1, max: Infinity};// REP
  this.rules[31].opcodes[1] = {type: 2, children: [2,3,4,5]};// CAT
  this.rules[31].opcodes[2] = {type: 4, index: 52};// RNM(ws)
  this.rules[31].opcodes[3] = {type: 4, index: 23};// RNM(conjunction)
  this.rules[31].opcodes[4] = {type: 4, index: 52};// RNM(ws)
  this.rules[31].opcodes[5] = {type: 4, index: 33};// RNM(subAttributeSet)

  /* disjunctionAttributeSet */
  this.rules[32].opcodes = [];
  this.rules[32].opcodes[0] = {type: 3, min: 1, max: Infinity};// REP
  this.rules[32].opcodes[1] = {type: 2, children: [2,3,4,5]};// CAT
  this.rules[32].opcodes[2] = {type: 4, index: 52};// RNM(ws)
  this.rules[32].opcodes[3] = {type: 4, index: 24};// RNM(disjunction)
  this.rules[32].opcodes[4] = {type: 4, index: 52};// RNM(ws)
  this.rules[32].opcodes[5] = {type: 4, index: 33};// RNM(subAttributeSet)

  /* subAttributeSet */
  this.rules[33].opcodes = [];
  this.rules[33].opcodes[0] = {type: 1, children: [1,2]};// ALT
  this.rules[33].opcodes[1] = {type: 4, index: 35};// RNM(eclAttribute)
  this.rules[33].opcodes[2] = {type: 2, children: [3,4,5,6,7]};// CAT
  this.rules[33].opcodes[3] = {type: 7, string: [40]};// TLS
  this.rules[33].opcodes[4] = {type: 4, index: 52};// RNM(ws)
  this.rules[33].opcodes[5] = {type: 4, index: 30};// RNM(eclAttributeSet)
  this.rules[33].opcodes[6] = {type: 4, index: 52};// RNM(ws)
  this.rules[33].opcodes[7] = {type: 7, string: [41]};// TLS

  /* eclAttributeGroup */
  this.rules[34].opcodes = [];
  this.rules[34].opcodes[0] = {type: 2, children: [1,7,8,9,10,11]};// CAT
  this.rules[34].opcodes[1] = {type: 3, min: 0, max: 1};// REP
  this.rules[34].opcodes[2] = {type: 2, children: [3,4,5,6]};// CAT
  this.rules[34].opcodes[3] = {type: 7, string: [91]};// TLS
  this.rules[34].opcodes[4] = {type: 4, index: 36};// RNM(cardinality)
  this.rules[34].opcodes[5] = {type: 7, string: [93]};// TLS
  this.rules[34].opcodes[6] = {type: 4, index: 52};// RNM(ws)
  this.rules[34].opcodes[7] = {type: 7, string: [123]};// TLS
  this.rules[34].opcodes[8] = {type: 4, index: 52};// RNM(ws)
  this.rules[34].opcodes[9] = {type: 4, index: 30};// RNM(eclAttributeSet)
  this.rules[34].opcodes[10] = {type: 4, index: 52};// RNM(ws)
  this.rules[34].opcodes[11] = {type: 7, string: [125]};// TLS

  /* eclAttribute */
  this.rules[35].opcodes = [];
  this.rules[35].opcodes[0] = {type: 2, children: [1,7,11,12,13]};// CAT
  this.rules[35].opcodes[1] = {type: 3, min: 0, max: 1};// REP
  this.rules[35].opcodes[2] = {type: 2, children: [3,4,5,6]};// CAT
  this.rules[35].opcodes[3] = {type: 7, string: [91]};// TLS
  this.rules[35].opcodes[4] = {type: 4, index: 36};// RNM(cardinality)
  this.rules[35].opcodes[5] = {type: 7, string: [93]};// TLS
  this.rules[35].opcodes[6] = {type: 4, index: 52};// RNM(ws)
  this.rules[35].opcodes[7] = {type: 3, min: 0, max: 1};// REP
  this.rules[35].opcodes[8] = {type: 2, children: [9,10]};// CAT
  this.rules[35].opcodes[9] = {type: 4, index: 41};// RNM(reverseFlag)
  this.rules[35].opcodes[10] = {type: 4, index: 52};// RNM(ws)
  this.rules[35].opcodes[11] = {type: 4, index: 42};// RNM(eclAttributeName)
  this.rules[35].opcodes[12] = {type: 4, index: 52};// RNM(ws)
  this.rules[35].opcodes[13] = {type: 1, children: [14,18,23]};// ALT
  this.rules[35].opcodes[14] = {type: 2, children: [15,16,17]};// CAT
  this.rules[35].opcodes[15] = {type: 4, index: 43};// RNM(expressionComparisonOperator)
  this.rules[35].opcodes[16] = {type: 4, index: 52};// RNM(ws)
  this.rules[35].opcodes[17] = {type: 4, index: 8};// RNM(subExpressionConstraint)
  this.rules[35].opcodes[18] = {type: 2, children: [19,20,21,22]};// CAT
  this.rules[35].opcodes[19] = {type: 4, index: 44};// RNM(numericComparisonOperator)
  this.rules[35].opcodes[20] = {type: 4, index: 52};// RNM(ws)
  this.rules[35].opcodes[21] = {type: 7, string: [35]};// TLS
  this.rules[35].opcodes[22] = {type: 4, index: 46};// RNM(numericValue)
  this.rules[35].opcodes[23] = {type: 2, children: [24,25,26,27,28]};// CAT
  this.rules[35].opcodes[24] = {type: 4, index: 45};// RNM(stringComparisonOperator)
  this.rules[35].opcodes[25] = {type: 4, index: 52};// RNM(ws)
  this.rules[35].opcodes[26] = {type: 4, index: 62};// RNM(QM)
  this.rules[35].opcodes[27] = {type: 4, index: 47};// RNM(stringValue)
  this.rules[35].opcodes[28] = {type: 4, index: 62};// RNM(QM)

  /* cardinality */
  this.rules[36].opcodes = [];
  this.rules[36].opcodes[0] = {type: 2, children: [1,2,3]};// CAT
  this.rules[36].opcodes[1] = {type: 4, index: 37};// RNM(minValue)
  this.rules[36].opcodes[2] = {type: 4, index: 38};// RNM(to)
  this.rules[36].opcodes[3] = {type: 4, index: 39};// RNM(maxValue)

  /* minValue */
  this.rules[37].opcodes = [];
  this.rules[37].opcodes[0] = {type: 4, index: 50};// RNM(nonNegativeIntegerValue)

  /* to */
  this.rules[38].opcodes = [];
  this.rules[38].opcodes[0] = {type: 1, children: [1,2]};// ALT
  this.rules[38].opcodes[1] = {type: 7, string: [46,46]};// TLS
  this.rules[38].opcodes[2] = {type: 2, children: [3,4,7,10]};// CAT
  this.rules[38].opcodes[3] = {type: 4, index: 53};// RNM(mws)
  this.rules[38].opcodes[4] = {type: 1, children: [5,6]};// ALT
  this.rules[38].opcodes[5] = {type: 7, string: [116]};// TLS
  this.rules[38].opcodes[6] = {type: 7, string: [116]};// TLS
  this.rules[38].opcodes[7] = {type: 1, children: [8,9]};// ALT
  this.rules[38].opcodes[8] = {type: 7, string: [111]};// TLS
  this.rules[38].opcodes[9] = {type: 7, string: [111]};// TLS
  this.rules[38].opcodes[10] = {type: 4, index: 53};// RNM(mws)

  /* maxValue */
  this.rules[39].opcodes = [];
  this.rules[39].opcodes[0] = {type: 1, children: [1,2]};// ALT
  this.rules[39].opcodes[1] = {type: 4, index: 50};// RNM(nonNegativeIntegerValue)
  this.rules[39].opcodes[2] = {type: 4, index: 40};// RNM(many)

  /* many */
  this.rules[40].opcodes = [];
  this.rules[40].opcodes[0] = {type: 1, children: [1,2]};// ALT
  this.rules[40].opcodes[1] = {type: 7, string: [42]};// TLS
  this.rules[40].opcodes[2] = {type: 2, children: [3,6,9,12]};// CAT
  this.rules[40].opcodes[3] = {type: 1, children: [4,5]};// ALT
  this.rules[40].opcodes[4] = {type: 7, string: [109]};// TLS
  this.rules[40].opcodes[5] = {type: 7, string: [109]};// TLS
  this.rules[40].opcodes[6] = {type: 1, children: [7,8]};// ALT
  this.rules[40].opcodes[7] = {type: 7, string: [97]};// TLS
  this.rules[40].opcodes[8] = {type: 7, string: [97]};// TLS
  this.rules[40].opcodes[9] = {type: 1, children: [10,11]};// ALT
  this.rules[40].opcodes[10] = {type: 7, string: [110]};// TLS
  this.rules[40].opcodes[11] = {type: 7, string: [110]};// TLS
  this.rules[40].opcodes[12] = {type: 1, children: [13,14]};// ALT
  this.rules[40].opcodes[13] = {type: 7, string: [121]};// TLS
  this.rules[40].opcodes[14] = {type: 7, string: [121]};// TLS

  /* reverseFlag */
  this.rules[41].opcodes = [];
  this.rules[41].opcodes[0] = {type: 1, children: [1,29]};// ALT
  this.rules[41].opcodes[1] = {type: 2, children: [2,5,8,11,14,17,20,23,26]};// CAT
  this.rules[41].opcodes[2] = {type: 1, children: [3,4]};// ALT
  this.rules[41].opcodes[3] = {type: 7, string: [114]};// TLS
  this.rules[41].opcodes[4] = {type: 7, string: [114]};// TLS
  this.rules[41].opcodes[5] = {type: 1, children: [6,7]};// ALT
  this.rules[41].opcodes[6] = {type: 7, string: [101]};// TLS
  this.rules[41].opcodes[7] = {type: 7, string: [101]};// TLS
  this.rules[41].opcodes[8] = {type: 1, children: [9,10]};// ALT
  this.rules[41].opcodes[9] = {type: 7, string: [118]};// TLS
  this.rules[41].opcodes[10] = {type: 7, string: [118]};// TLS
  this.rules[41].opcodes[11] = {type: 1, children: [12,13]};// ALT
  this.rules[41].opcodes[12] = {type: 7, string: [101]};// TLS
  this.rules[41].opcodes[13] = {type: 7, string: [101]};// TLS
  this.rules[41].opcodes[14] = {type: 1, children: [15,16]};// ALT
  this.rules[41].opcodes[15] = {type: 7, string: [114]};// TLS
  this.rules[41].opcodes[16] = {type: 7, string: [114]};// TLS
  this.rules[41].opcodes[17] = {type: 1, children: [18,19]};// ALT
  this.rules[41].opcodes[18] = {type: 7, string: [115]};// TLS
  this.rules[41].opcodes[19] = {type: 7, string: [115]};// TLS
  this.rules[41].opcodes[20] = {type: 1, children: [21,22]};// ALT
  this.rules[41].opcodes[21] = {type: 7, string: [101]};// TLS
  this.rules[41].opcodes[22] = {type: 7, string: [101]};// TLS
  this.rules[41].opcodes[23] = {type: 1, children: [24,25]};// ALT
  this.rules[41].opcodes[24] = {type: 7, string: [111]};// TLS
  this.rules[41].opcodes[25] = {type: 7, string: [111]};// TLS
  this.rules[41].opcodes[26] = {type: 1, children: [27,28]};// ALT
  this.rules[41].opcodes[27] = {type: 7, string: [102]};// TLS
  this.rules[41].opcodes[28] = {type: 7, string: [102]};// TLS
  this.rules[41].opcodes[29] = {type: 7, string: [114]};// TLS

  /* eclAttributeName */
  this.rules[42].opcodes = [];
  this.rules[42].opcodes[0] = {type: 4, index: 8};// RNM(subExpressionConstraint)

  /* expressionComparisonOperator */
  this.rules[43].opcodes = [];
  this.rules[43].opcodes[0] = {type: 1, children: [1,2,3,15]};// ALT
  this.rules[43].opcodes[1] = {type: 7, string: [61]};// TLS
  this.rules[43].opcodes[2] = {type: 7, string: [33,61]};// TLS
  this.rules[43].opcodes[3] = {type: 2, children: [4,7,10,13,14]};// CAT
  this.rules[43].opcodes[4] = {type: 1, children: [5,6]};// ALT
  this.rules[43].opcodes[5] = {type: 7, string: [110]};// TLS
  this.rules[43].opcodes[6] = {type: 7, string: [110]};// TLS
  this.rules[43].opcodes[7] = {type: 1, children: [8,9]};// ALT
  this.rules[43].opcodes[8] = {type: 7, string: [111]};// TLS
  this.rules[43].opcodes[9] = {type: 7, string: [111]};// TLS
  this.rules[43].opcodes[10] = {type: 1, children: [11,12]};// ALT
  this.rules[43].opcodes[11] = {type: 7, string: [116]};// TLS
  this.rules[43].opcodes[12] = {type: 7, string: [116]};// TLS
  this.rules[43].opcodes[13] = {type: 4, index: 52};// RNM(ws)
  this.rules[43].opcodes[14] = {type: 7, string: [61]};// TLS
  this.rules[43].opcodes[15] = {type: 7, string: [60,62]};// TLS

  /* numericComparisonOperator */
  this.rules[44].opcodes = [];
  this.rules[44].opcodes[0] = {type: 1, children: [1,2,3,15,16,17,18,19]};// ALT
  this.rules[44].opcodes[1] = {type: 7, string: [61]};// TLS
  this.rules[44].opcodes[2] = {type: 7, string: [33,61]};// TLS
  this.rules[44].opcodes[3] = {type: 2, children: [4,7,10,13,14]};// CAT
  this.rules[44].opcodes[4] = {type: 1, children: [5,6]};// ALT
  this.rules[44].opcodes[5] = {type: 7, string: [110]};// TLS
  this.rules[44].opcodes[6] = {type: 7, string: [110]};// TLS
  this.rules[44].opcodes[7] = {type: 1, children: [8,9]};// ALT
  this.rules[44].opcodes[8] = {type: 7, string: [111]};// TLS
  this.rules[44].opcodes[9] = {type: 7, string: [111]};// TLS
  this.rules[44].opcodes[10] = {type: 1, children: [11,12]};// ALT
  this.rules[44].opcodes[11] = {type: 7, string: [116]};// TLS
  this.rules[44].opcodes[12] = {type: 7, string: [116]};// TLS
  this.rules[44].opcodes[13] = {type: 4, index: 52};// RNM(ws)
  this.rules[44].opcodes[14] = {type: 7, string: [61]};// TLS
  this.rules[44].opcodes[15] = {type: 7, string: [60,62]};// TLS
  this.rules[44].opcodes[16] = {type: 7, string: [60,61]};// TLS
  this.rules[44].opcodes[17] = {type: 7, string: [60]};// TLS
  this.rules[44].opcodes[18] = {type: 7, string: [62,61]};// TLS
  this.rules[44].opcodes[19] = {type: 7, string: [62]};// TLS

  /* stringComparisonOperator */
  this.rules[45].opcodes = [];
  this.rules[45].opcodes[0] = {type: 1, children: [1,2,3,15]};// ALT
  this.rules[45].opcodes[1] = {type: 7, string: [61]};// TLS
  this.rules[45].opcodes[2] = {type: 7, string: [33,61]};// TLS
  this.rules[45].opcodes[3] = {type: 2, children: [4,7,10,13,14]};// CAT
  this.rules[45].opcodes[4] = {type: 1, children: [5,6]};// ALT
  this.rules[45].opcodes[5] = {type: 7, string: [110]};// TLS
  this.rules[45].opcodes[6] = {type: 7, string: [110]};// TLS
  this.rules[45].opcodes[7] = {type: 1, children: [8,9]};// ALT
  this.rules[45].opcodes[8] = {type: 7, string: [111]};// TLS
  this.rules[45].opcodes[9] = {type: 7, string: [111]};// TLS
  this.rules[45].opcodes[10] = {type: 1, children: [11,12]};// ALT
  this.rules[45].opcodes[11] = {type: 7, string: [116]};// TLS
  this.rules[45].opcodes[12] = {type: 7, string: [116]};// TLS
  this.rules[45].opcodes[13] = {type: 4, index: 52};// RNM(ws)
  this.rules[45].opcodes[14] = {type: 7, string: [61]};// TLS
  this.rules[45].opcodes[15] = {type: 7, string: [60,62]};// TLS

  /* numericValue */
  this.rules[46].opcodes = [];
  this.rules[46].opcodes[0] = {type: 2, children: [1,5]};// CAT
  this.rules[46].opcodes[1] = {type: 3, min: 0, max: 1};// REP
  this.rules[46].opcodes[2] = {type: 1, children: [3,4]};// ALT
  this.rules[46].opcodes[3] = {type: 7, string: [45]};// TLS
  this.rules[46].opcodes[4] = {type: 7, string: [43]};// TLS
  this.rules[46].opcodes[5] = {type: 1, children: [6,7]};// ALT
  this.rules[46].opcodes[6] = {type: 4, index: 49};// RNM(decimalValue)
  this.rules[46].opcodes[7] = {type: 4, index: 48};// RNM(integerValue)

  /* stringValue */
  this.rules[47].opcodes = [];
  this.rules[47].opcodes[0] = {type: 3, min: 1, max: Infinity};// REP
  this.rules[47].opcodes[1] = {type: 1, children: [2,3]};// ALT
  this.rules[47].opcodes[2] = {type: 4, index: 68};// RNM(anyNonEscapedChar)
  this.rules[47].opcodes[3] = {type: 4, index: 69};// RNM(escapedChar)

  /* integerValue */
  this.rules[48].opcodes = [];
  this.rules[48].opcodes[0] = {type: 1, children: [1,5]};// ALT
  this.rules[48].opcodes[1] = {type: 2, children: [2,3]};// CAT
  this.rules[48].opcodes[2] = {type: 4, index: 66};// RNM(digitNonZero)
  this.rules[48].opcodes[3] = {type: 3, min: 0, max: Infinity};// REP
  this.rules[48].opcodes[4] = {type: 4, index: 64};// RNM(digit)
  this.rules[48].opcodes[5] = {type: 4, index: 65};// RNM(zero)

  /* decimalValue */
  this.rules[49].opcodes = [];
  this.rules[49].opcodes[0] = {type: 2, children: [1,2,3]};// CAT
  this.rules[49].opcodes[1] = {type: 4, index: 48};// RNM(integerValue)
  this.rules[49].opcodes[2] = {type: 7, string: [46]};// TLS
  this.rules[49].opcodes[3] = {type: 3, min: 1, max: Infinity};// REP
  this.rules[49].opcodes[4] = {type: 4, index: 64};// RNM(digit)

  /* nonNegativeIntegerValue */
  this.rules[50].opcodes = [];
  this.rules[50].opcodes[0] = {type: 1, children: [1,5]};// ALT
  this.rules[50].opcodes[1] = {type: 2, children: [2,3]};// CAT
  this.rules[50].opcodes[2] = {type: 4, index: 66};// RNM(digitNonZero)
  this.rules[50].opcodes[3] = {type: 3, min: 0, max: Infinity};// REP
  this.rules[50].opcodes[4] = {type: 4, index: 64};// RNM(digit)
  this.rules[50].opcodes[5] = {type: 4, index: 65};// RNM(zero)

  /* sctId */
  this.rules[51].opcodes = [];
  this.rules[51].opcodes[0] = {type: 2, children: [1,2]};// CAT
  this.rules[51].opcodes[1] = {type: 4, index: 66};// RNM(digitNonZero)
  this.rules[51].opcodes[2] = {type: 3, min: 5, max: 17};// REP
  this.rules[51].opcodes[3] = {type: 4, index: 64};// RNM(digit)

  /* ws */
  this.rules[52].opcodes = [];
  this.rules[52].opcodes[0] = {type: 3, min: 0, max: Infinity};// REP
  this.rules[52].opcodes[1] = {type: 1, children: [2,3,4,5,6]};// ALT
  this.rules[52].opcodes[2] = {type: 4, index: 58};// RNM(SP)
  this.rules[52].opcodes[3] = {type: 4, index: 59};// RNM(HTAB)
  this.rules[52].opcodes[4] = {type: 4, index: 60};// RNM(CR)
  this.rules[52].opcodes[5] = {type: 4, index: 61};// RNM(LF)
  this.rules[52].opcodes[6] = {type: 4, index: 54};// RNM(comment)

  /* mws */
  this.rules[53].opcodes = [];
  this.rules[53].opcodes[0] = {type: 3, min: 1, max: Infinity};// REP
  this.rules[53].opcodes[1] = {type: 1, children: [2,3,4,5,6]};// ALT
  this.rules[53].opcodes[2] = {type: 4, index: 58};// RNM(SP)
  this.rules[53].opcodes[3] = {type: 4, index: 59};// RNM(HTAB)
  this.rules[53].opcodes[4] = {type: 4, index: 60};// RNM(CR)
  this.rules[53].opcodes[5] = {type: 4, index: 61};// RNM(LF)
  this.rules[53].opcodes[6] = {type: 4, index: 54};// RNM(comment)

  /* comment */
  this.rules[54].opcodes = [];
  this.rules[54].opcodes[0] = {type: 2, children: [1,2,6]};// CAT
  this.rules[54].opcodes[1] = {type: 7, string: [47,42]};// TLS
  this.rules[54].opcodes[2] = {type: 3, min: 0, max: Infinity};// REP
  this.rules[54].opcodes[3] = {type: 1, children: [4,5]};// ALT
  this.rules[54].opcodes[4] = {type: 4, index: 55};// RNM(nonStarChar)
  this.rules[54].opcodes[5] = {type: 4, index: 56};// RNM(starWithNonFSlash)
  this.rules[54].opcodes[6] = {type: 7, string: [42,47]};// TLS

  /* nonStarChar */
  this.rules[55].opcodes = [];
  this.rules[55].opcodes[0] = {type: 1, children: [1,2,3,4,5,6,7,8,9]};// ALT
  this.rules[55].opcodes[1] = {type: 4, index: 58};// RNM(SP)
  this.rules[55].opcodes[2] = {type: 4, index: 59};// RNM(HTAB)
  this.rules[55].opcodes[3] = {type: 4, index: 60};// RNM(CR)
  this.rules[55].opcodes[4] = {type: 4, index: 61};// RNM(LF)
  this.rules[55].opcodes[5] = {type: 5, min: 33, max: 41};// TRG
  this.rules[55].opcodes[6] = {type: 5, min: 43, max: 126};// TRG
  this.rules[55].opcodes[7] = {type: 4, index: 70};// RNM(UTF8-2)
  this.rules[55].opcodes[8] = {type: 4, index: 71};// RNM(UTF8-3)
  this.rules[55].opcodes[9] = {type: 4, index: 72};// RNM(UTF8-4)

  /* starWithNonFSlash */
  this.rules[56].opcodes = [];
  this.rules[56].opcodes[0] = {type: 2, children: [1,2]};// CAT
  this.rules[56].opcodes[1] = {type: 6, string: [42]};// TBS
  this.rules[56].opcodes[2] = {type: 4, index: 57};// RNM(nonFSlash)

  /* nonFSlash */
  this.rules[57].opcodes = [];
  this.rules[57].opcodes[0] = {type: 1, children: [1,2,3,4,5,6,7,8,9]};// ALT
  this.rules[57].opcodes[1] = {type: 4, index: 58};// RNM(SP)
  this.rules[57].opcodes[2] = {type: 4, index: 59};// RNM(HTAB)
  this.rules[57].opcodes[3] = {type: 4, index: 60};// RNM(CR)
  this.rules[57].opcodes[4] = {type: 4, index: 61};// RNM(LF)
  this.rules[57].opcodes[5] = {type: 5, min: 33, max: 46};// TRG
  this.rules[57].opcodes[6] = {type: 5, min: 48, max: 126};// TRG
  this.rules[57].opcodes[7] = {type: 4, index: 70};// RNM(UTF8-2)
  this.rules[57].opcodes[8] = {type: 4, index: 71};// RNM(UTF8-3)
  this.rules[57].opcodes[9] = {type: 4, index: 72};// RNM(UTF8-4)

  /* SP */
  this.rules[58].opcodes = [];
  this.rules[58].opcodes[0] = {type: 6, string: [32]};// TBS

  /* HTAB */
  this.rules[59].opcodes = [];
  this.rules[59].opcodes[0] = {type: 6, string: [9]};// TBS

  /* CR */
  this.rules[60].opcodes = [];
  this.rules[60].opcodes[0] = {type: 6, string: [13]};// TBS

  /* LF */
  this.rules[61].opcodes = [];
  this.rules[61].opcodes[0] = {type: 6, string: [10]};// TBS

  /* QM */
  this.rules[62].opcodes = [];
  this.rules[62].opcodes[0] = {type: 6, string: [34]};// TBS

  /* BS */
  this.rules[63].opcodes = [];
  this.rules[63].opcodes[0] = {type: 6, string: [92]};// TBS

  /* digit */
  this.rules[64].opcodes = [];
  this.rules[64].opcodes[0] = {type: 5, min: 48, max: 57};// TRG

  /* zero */
  this.rules[65].opcodes = [];
  this.rules[65].opcodes[0] = {type: 6, string: [48]};// TBS

  /* digitNonZero */
  this.rules[66].opcodes = [];
  this.rules[66].opcodes[0] = {type: 5, min: 49, max: 57};// TRG

  /* nonwsNonPipe */
  this.rules[67].opcodes = [];
  this.rules[67].opcodes[0] = {type: 1, children: [1,2,3,4,5]};// ALT
  this.rules[67].opcodes[1] = {type: 5, min: 33, max: 123};// TRG
  this.rules[67].opcodes[2] = {type: 5, min: 125, max: 126};// TRG
  this.rules[67].opcodes[3] = {type: 4, index: 70};// RNM(UTF8-2)
  this.rules[67].opcodes[4] = {type: 4, index: 71};// RNM(UTF8-3)
  this.rules[67].opcodes[5] = {type: 4, index: 72};// RNM(UTF8-4)

  /* anyNonEscapedChar */
  this.rules[68].opcodes = [];
  this.rules[68].opcodes[0] = {type: 1, children: [1,2,3,4,5,6,7,8,9,10]};// ALT
  this.rules[68].opcodes[1] = {type: 4, index: 58};// RNM(SP)
  this.rules[68].opcodes[2] = {type: 4, index: 59};// RNM(HTAB)
  this.rules[68].opcodes[3] = {type: 4, index: 60};// RNM(CR)
  this.rules[68].opcodes[4] = {type: 4, index: 61};// RNM(LF)
  this.rules[68].opcodes[5] = {type: 5, min: 32, max: 33};// TRG
  this.rules[68].opcodes[6] = {type: 5, min: 35, max: 91};// TRG
  this.rules[68].opcodes[7] = {type: 5, min: 93, max: 126};// TRG
  this.rules[68].opcodes[8] = {type: 4, index: 70};// RNM(UTF8-2)
  this.rules[68].opcodes[9] = {type: 4, index: 71};// RNM(UTF8-3)
  this.rules[68].opcodes[10] = {type: 4, index: 72};// RNM(UTF8-4)

  /* escapedChar */
  this.rules[69].opcodes = [];
  this.rules[69].opcodes[0] = {type: 1, children: [1,4]};// ALT
  this.rules[69].opcodes[1] = {type: 2, children: [2,3]};// CAT
  this.rules[69].opcodes[2] = {type: 4, index: 63};// RNM(BS)
  this.rules[69].opcodes[3] = {type: 4, index: 62};// RNM(QM)
  this.rules[69].opcodes[4] = {type: 2, children: [5,6]};// CAT
  this.rules[69].opcodes[5] = {type: 4, index: 63};// RNM(BS)
  this.rules[69].opcodes[6] = {type: 4, index: 63};// RNM(BS)

  /* UTF8-2 */
  this.rules[70].opcodes = [];
  this.rules[70].opcodes[0] = {type: 2, children: [1,2]};// CAT
  this.rules[70].opcodes[1] = {type: 5, min: 194, max: 223};// TRG
  this.rules[70].opcodes[2] = {type: 4, index: 73};// RNM(UTF8-tail)

  /* UTF8-3 */
  this.rules[71].opcodes = [];
  this.rules[71].opcodes[0] = {type: 1, children: [1,5,9,13]};// ALT
  this.rules[71].opcodes[1] = {type: 2, children: [2,3,4]};// CAT
  this.rules[71].opcodes[2] = {type: 6, string: [224]};// TBS
  this.rules[71].opcodes[3] = {type: 5, min: 160, max: 191};// TRG
  this.rules[71].opcodes[4] = {type: 4, index: 73};// RNM(UTF8-tail)
  this.rules[71].opcodes[5] = {type: 2, children: [6,7]};// CAT
  this.rules[71].opcodes[6] = {type: 5, min: 225, max: 236};// TRG
  this.rules[71].opcodes[7] = {type: 3, min: 2, max: 2};// REP
  this.rules[71].opcodes[8] = {type: 4, index: 73};// RNM(UTF8-tail)
  this.rules[71].opcodes[9] = {type: 2, children: [10,11,12]};// CAT
  this.rules[71].opcodes[10] = {type: 6, string: [237]};// TBS
  this.rules[71].opcodes[11] = {type: 5, min: 128, max: 159};// TRG
  this.rules[71].opcodes[12] = {type: 4, index: 73};// RNM(UTF8-tail)
  this.rules[71].opcodes[13] = {type: 2, children: [14,15]};// CAT
  this.rules[71].opcodes[14] = {type: 5, min: 238, max: 239};// TRG
  this.rules[71].opcodes[15] = {type: 3, min: 2, max: 2};// REP
  this.rules[71].opcodes[16] = {type: 4, index: 73};// RNM(UTF8-tail)

  /* UTF8-4 */
  this.rules[72].opcodes = [];
  this.rules[72].opcodes[0] = {type: 1, children: [1,6,10]};// ALT
  this.rules[72].opcodes[1] = {type: 2, children: [2,3,4]};// CAT
  this.rules[72].opcodes[2] = {type: 6, string: [240]};// TBS
  this.rules[72].opcodes[3] = {type: 5, min: 144, max: 191};// TRG
  this.rules[72].opcodes[4] = {type: 3, min: 2, max: 2};// REP
  this.rules[72].opcodes[5] = {type: 4, index: 73};// RNM(UTF8-tail)
  this.rules[72].opcodes[6] = {type: 2, children: [7,8]};// CAT
  this.rules[72].opcodes[7] = {type: 5, min: 241, max: 243};// TRG
  this.rules[72].opcodes[8] = {type: 3, min: 3, max: 3};// REP
  this.rules[72].opcodes[9] = {type: 4, index: 73};// RNM(UTF8-tail)
  this.rules[72].opcodes[10] = {type: 2, children: [11,12,13]};// CAT
  this.rules[72].opcodes[11] = {type: 6, string: [244]};// TBS
  this.rules[72].opcodes[12] = {type: 5, min: 128, max: 143};// TRG
  this.rules[72].opcodes[13] = {type: 3, min: 2, max: 2};// REP
  this.rules[72].opcodes[14] = {type: 4, index: 73};// RNM(UTF8-tail)

  /* UTF8-tail */
  this.rules[73].opcodes = [];
  this.rules[73].opcodes[0] = {type: 5, min: 128, max: 191};// TRG

  // The `toString()` function will display the original grammar file(s) that produced these opcodes.
  this.toString = function(){
    var str = "";
    str += "expressionConstraint = ws ( refinedExpressionConstraint / compoundExpressionConstraint / dottedExpressionConstraint / subExpressionConstraint ) ws\n";
    str += "refinedExpressionConstraint = subExpressionConstraint ws \":\" ws eclRefinement\n";
    str += "compoundExpressionConstraint = conjunctionExpressionConstraint / disjunctionExpressionConstraint / exclusionExpressionConstraint\n";
    str += "conjunctionExpressionConstraint = subExpressionConstraint 1*(ws conjunction ws subExpressionConstraint)\n";
    str += "disjunctionExpressionConstraint = subExpressionConstraint 1*(ws disjunction ws subExpressionConstraint)\n";
    str += "exclusionExpressionConstraint = subExpressionConstraint ws exclusion ws subExpressionConstraint\n";
    str += "dottedExpressionConstraint = subExpressionConstraint 1*(ws dottedExpressionAttribute)\n";
    str += "dottedExpressionAttribute = dot ws eclAttributeName\n";
    str += "subExpressionConstraint = [constraintOperator ws] [memberOf ws] (eclFocusConcept / \"(\" ws expressionConstraint ws \")\")\n";
    str += "eclFocusConcept = eclConceptReference / wildCard\n";
    str += "dot = \".\"\n";
    str += "memberOf = \"^\" / (\"m\"/\"M\") (\"e\"/\"E\") (\"m\"/\"M\") (\"b\"/\"B\") (\"e\"/\"E\") (\"r\"/\"R\") (\"o\"/\"O\") (\"f\"/\"F\")\n";
    str += "eclConceptReference = conceptId [ws \"|\" ws term ws \"|\"]\n";
    str += "conceptId = sctId\n";
    str += "term = 1*nonwsNonPipe *( 1*SP 1*nonwsNonPipe )\n";
    str += "wildCard = \"*\" / ( (\"a\"/\"A\") (\"n\"/\"N\") (\"y\"/\"Y\") )\n";
    str += "constraintOperator = childOf / descendantOrSelfOf / descendantOf / parentOf / ancestorOrSelfOf / ancestorOf\n";
    str += "descendantOf = \"<\" / ( (\"d\"/\"D\") (\"e\"/\"E\") (\"s\"/\"S\") (\"c\"/\"C\") (\"e\"/\"E\") (\"n\"/\"N\") (\"d\"/\"D\") (\"a\"/\"A\") (\"n\"/\"N\") (\"t\"/\"T\") (\"o\"/\"O\") (\"f\"/\"F\") mws )\n";
    str += "descendantOrSelfOf = \"<<\" / ( (\"d\"/\"D\") (\"e\"/\"E\") (\"s\"/\"S\") (\"c\"/\"C\") (\"e\"/\"E\") (\"n\"/\"N\") (\"d\"/\"D\") (\"a\"/\"A\") (\"n\"/\"N\") (\"t\"/\"T\") (\"o\"/\"O\") (\"r\"/\"R\") (\"s\"/\"S\") (\"e\"/\"E\") (\"l\"/\"L\") (\"f\"/\"F\") (\"o\"/\"O\") (\"f\"/\"F\") mws )\n";
    str += "childOf = \"<!\" / ((\"c\"/\"C\") (\"h\"/\"H\") (\"i\"/\"I\") (\"l\"/\"L\") (\"d\"/\"D\") (\"o\"/\"O\") (\"f\"/\"F\") mws )\n";
    str += "ancestorOf = \">\" / ( (\"a\"/\"A\") (\"n\"/\"N\") (\"c\"/\"C\") (\"e\"/\"E\") (\"s\"/\"S\") (\"t\"/\"T\") (\"o\"/\"O\") (\"r\"/\"R\") (\"o\"/\"O\") (\"f\"/\"F\") mws )\n";
    str += "ancestorOrSelfOf = \">>\" / ( (\"a\"/\"A\") (\"n\"/\"N\") (\"c\"/\"C\") (\"e\"/\"E\") (\"s\"/\"S\") (\"t\"/\"T\") (\"o\"/\"O\") (\"r\"/\"R\") (\"o\"/\"O\") (\"r\"/\"R\") (\"s\"/\"S\") (\"e\"/\"E\") (\"l\"/\"L\") (\"f\"/\"F\") (\"o\"/\"O\") (\"f\"/\"F\") mws )\n";
    str += "parentOf = \">!\" / ((\"p\"/\"P\") (\"a\"/\"A\") (\"r\"/\"R\") (\"e\"/\"E\") (\"n\"/\"N\") (\"t\"/\"T\") (\"o\"/\"O\") (\"f\"/\"F\") mws )\n";
    str += "conjunction = ((\"a\"/\"A\") (\"n\"/\"N\") (\"d\"/\"D\") mws) / \",\"\n";
    str += "disjunction = (\"o\"/\"O\") (\"r\"/\"R\") mws\n";
    str += "exclusion = (\"m\"/\"M\") (\"i\"/\"I\") (\"n\"/\"N\") (\"u\"/\"U\") (\"s\"/\"S\") mws\n";
    str += "eclRefinement = subRefinement ws [conjunctionRefinementSet / disjunctionRefinementSet]\n";
    str += "conjunctionRefinementSet = 1*(ws conjunction ws subRefinement)\n";
    str += "disjunctionRefinementSet = 1*(ws disjunction ws subRefinement)\n";
    str += "subRefinement = eclAttributeSet / eclAttributeGroup / \"(\" ws eclRefinement ws \")\"\n";
    str += "eclAttributeSet = subAttributeSet ws [conjunctionAttributeSet / disjunctionAttributeSet]\n";
    str += "conjunctionAttributeSet = 1*(ws conjunction ws subAttributeSet)\n";
    str += "disjunctionAttributeSet = 1*(ws disjunction ws subAttributeSet)\n";
    str += "subAttributeSet = eclAttribute / \"(\" ws eclAttributeSet ws \")\"\n";
    str += "eclAttributeGroup = [\"[\" cardinality \"]\" ws] \"{\" ws eclAttributeSet ws \"}\"\n";
    str += "eclAttribute = [\"[\" cardinality \"]\" ws] [reverseFlag ws] eclAttributeName ws (expressionComparisonOperator ws subExpressionConstraint / numericComparisonOperator ws \"#\" numericValue / stringComparisonOperator ws QM stringValue QM)\n";
    str += "cardinality = minValue to maxValue\n";
    str += "minValue = nonNegativeIntegerValue\n";
    str += "to = \"..\" / (mws (\"t\"/\"T\") (\"o\"/\"O\") mws)\n";
    str += "maxValue = nonNegativeIntegerValue / many\n";
    str += "many = \"*\" / ( (\"m\"/\"M\") (\"a\"/\"A\") (\"n\"/\"N\") (\"y\"/\"Y\"))\n";
    str += "reverseFlag = ( (\"r\"/\"R\") (\"e\"/\"E\") (\"v\"/\"V\") (\"e\"/\"E\") (\"r\"/\"R\") (\"s\"/\"S\") (\"e\"/\"E\") (\"o\"/\"O\") (\"f\"/\"F\")) / \"R\"\n";
    str += "eclAttributeName = subExpressionConstraint\n";
    str += "expressionComparisonOperator = \"=\" / \"!=\" / (\"n\"/\"N\") (\"o\"/\"O\") (\"t\"/\"T\") ws \"=\" / \"<>\"\n";
    str += "numericComparisonOperator = \"=\" / \"!=\" / (\"n\"/\"N\") (\"o\"/\"O\") (\"t\"/\"T\") ws \"=\" / \"<>\" / \"<=\" / \"<\" / \">=\" / \">\"\n";
    str += "stringComparisonOperator = \"=\" / \"!=\" / (\"n\"/\"N\") (\"o\"/\"O\") (\"t\"/\"T\") ws \"=\" / \"<>\"\n";
    str += "numericValue = [\"-\"/\"+\"] (decimalValue / integerValue)\n";
    str += "stringValue = 1*(anyNonEscapedChar / escapedChar)\n";
    str += "integerValue =  digitNonZero *digit / zero\n";
    str += "decimalValue = integerValue \".\" 1*digit\n";
    str += "nonNegativeIntegerValue = (digitNonZero *digit ) / zero\n";
    str += "sctId = digitNonZero 5*17( digit )\n";
    str += "ws = *( SP / HTAB / CR / LF / comment ) ; optional white space\n";
    str += "mws = 1*( SP / HTAB / CR / LF / comment ) ; mandatory white space\n";
    str += "comment = \"/*\" *(nonStarChar / starWithNonFSlash) \"*/\"\n";
    str += "nonStarChar = SP / HTAB / CR / LF / %x21-29 / %x2B-7E /UTF8-2 / UTF8-3 / UTF8-4\n";
    str += "starWithNonFSlash = %x2A nonFSlash\n";
    str += "nonFSlash = SP / HTAB / CR / LF / %x21-2E / %x30-7E /UTF8-2 / UTF8-3 / UTF8-4\n";
    str += "SP = %x20 ; space\n";
    str += "HTAB = %x09 ; tab\n";
    str += "CR = %x0D ; carriage return\n";
    str += "LF = %x0A ; line feed\n";
    str += "QM = %x22 ; quotation mark\n";
    str += "BS = %x5C ; back slash\n";
    str += "digit = %x30-39\n";
    str += "zero = %x30\n";
    str += "digitNonZero = %x31-39\n";
    str += "nonwsNonPipe = %x21-7B / %x7D-7E / UTF8-2 / UTF8-3 / UTF8-4\n";
    str += "anyNonEscapedChar = SP / HTAB / CR / LF / %x20-21 / %x23-5B / %x5D-7E / UTF8-2 / UTF8-3 / UTF8-4\n";
    str += "escapedChar = BS QM / BS BS\n";
    str += "UTF8-2 = %xC2-DF UTF8-tail\n";
    str += "UTF8-3 = %xE0 %xA0-BF UTF8-tail / %xE1-EC 2( UTF8-tail ) / %xED %x80-9F UTF8-tail / %xEE-EF 2( UTF8-tail )\n";
    str += "UTF8-4 = %xF0 %x90-BF 2( UTF8-tail ) / %xF1-F3 3( UTF8-tail ) / %xF4 %x80-8F 2( UTF8-tail )\n";
    str += "UTF8-tail = %x80-BF\n";
    return str;
  }
}
